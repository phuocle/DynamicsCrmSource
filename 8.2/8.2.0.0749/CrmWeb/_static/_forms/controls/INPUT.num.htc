<public:component lightweight="true">
<public:attach event="ondocumentready" onevent="Init()"/>
<public:attach event="onfocus" onevent="Focus()"/>
<public:property name="IsDirty" get="isDirty"/>
<public:property name="DataXml" get="dataXml"/>
<public:property name="DataValue" get="getDataValue" put="putDataValue"/>
<public:property name="Disabled" get="getDisabled" put="setDisabled"/>
<public:property name="RequiredLevel" get="getRequiredLevel"/>
<public:property name="Precision" get="getPrecision" put="setPrecision"/>
<public:property name="Min" get="getMin"/>
<public:property name="Max" get="getMax"/>
<public:property name="IgnoreRange" get="getIgnoreRange" put="setIgnoreRange"/>
<public:property name="DataChangeHandler"/>
<public:property name="PrecisionChangeHandler"/>
<public:method name="IsValid" internalname="parse"/>
<public:method name="SetFocus" internalname="setFocus"/>
<public:method name="FireOnChange" internalname="fireOnChange"/>
<script language="JavaScript"></script><script type="text/javascript">

                                           var _bAllowValidationMessage = true,
                                               _bIgnoreRange = false,
                                               _bTotalMoneyDigitsExceeded = false,
                                               _fDefaultValue = null,
                                               _sOldValue = null;

                                           function setIgnoreRange(ignore) {
                                               _bIgnoreRange = ignore
                                           }

                                           function getIgnoreRange() {
                                               return _bIgnoreRange
                                           }

                                           function Init() {
                                               _fDefaultValue = getDataValue();
                                               _sOldValue = value;
                                               if (IsNull(this._onchangeInitialized)) {
                                                   if (!IsNull(onchange))
                                                       this._onchangeCached = onchange;
                                                   this._onchangeInitialized = true
                                               }
                                               this.onchange = onChange;
                                               attachWindowOnBeforeUnload(beforeUnload)
                                           }

                                           function beforeUnload(oEvent) {
                                               _bAllowValidationMessage = false
                                           }

                                           function Focus() {
                                               _bAllowValidationMessage = true
                                           }

                                           function getNumDigits(iVal) {
                                               if (isNaN(iVal))
                                                   return -1;
                                               if (iVal == null)
                                                   return 0;
                                               var tempVal = iVal,
                                                   countDigits = 0;
                                               while (tempVal != 0) {
                                                   tempVal = tempVal / 10;
                                                   tempVal = parseInt(tempVal, 10);
                                                   countDigits++
                                               }
                                               return countDigits
                                           }

                                           function isDirty() {
                                               return _fDefaultValue != getDataValue()
                                           }

                                           function isValueValid(iVal) {
                                               if (isNaN(iVal))
                                                   return false;
                                               var iMinValue = parseFloat(this.min),
                                                   iMaxValue = parseFloat(this.max);
                                               _onValidateResult.IsValid = true;
                                               if (!IsNull(element.onValidate))
                                                   _onValidateResult = element.onValidate();
                                               var bIsOutOfRange = false;
                                               if (IgnoreRange)
                                                   bIsOutOfRange = false;
                                               else if (iVal != null)
                                                   bIsOutOfRange = iVal < iMinValue || iVal > iMaxValue;
                                               return (null == iVal ||
                                                       !(bIsOutOfRange || _bTotalMoneyDigitsExceeded == true)) &&
                                                   _onValidateResult.IsValid
                                           }

                                           var _onValidateResult = {};

                                           function tryPutDataValue(iVal) {
                                               if (isValueValid(iVal)) {
                                                   value = Mscrm.NumberUtility.addFormatting(iVal, getPrecision());
                                                   _sOldValue = value
                                               } else if (_bAllowValidationMessage) {
                                                   if (!IsNull(_onValidateResult.IsValid) && !_onValidateResult.IsValid)
                                                       sMessage = _onValidateResult.ErrorMessage;
                                                   else {
                                                       var iMinValue = parseFloat(this.min),
                                                           iMaxValue = parseFloat(this.max),
                                                           iAccuracy = getPrecision(),
                                                           sMessage;
                                                       sMessage =
                                                           "int" == this.dt
                                                           ? formatString(LOCID_NUMBER_RANGE_MASK,
                                                               Mscrm.NumberUtility.addFormatting(iMinValue, 0),
                                                               Mscrm.NumberUtility.addFormatting(iMaxValue, 0))
                                                           : formatString(LOCID_FLOAT_RANGE_MASK,
                                                               Mscrm.NumberUtility.addFormatting(iMinValue, iAccuracy),
                                                               Mscrm.NumberUtility.addFormatting(iMaxValue, iAccuracy))
                                                   }
                                                   alert(sMessage);
                                                   throw new Error(100, sMessage)
                                               }
                                           }

                                           function dataXml() {
                                               var iVal = getDataValue(),
                                                   sID = this.id,
                                                   sVal = "";
                                               if (!IsNull(iVal)) {
                                                   var sVal = iVal.toString();
                                                   if (sVal.indexOf("e") > -1)
                                                       sVal = iVal.toFixed(10)
                                               }
                                               return "<" + sID + ">" + sVal + "</" + sID + ">"
                                           }

                                           function onChange() {
                                               var bValid = parse();
                                               if (!IsNull(window.event) && IsNull(event.returnValue))
                                                   event.returnValue = bValid;
                                               event.returnValue == true &&
                                                   this._onchangeCached != null &&
                                                   this._onchangeCached.call()
                                           }

                                           function parse() {
                                               value = Trim(value);
                                               try {
                                                   if (value != "") {
                                                       var iVal =
                                                           "int" == this.dt
                                                               ? Mscrm.NumberUtility.locStringToInt(value)
                                                               : Mscrm.NumberUtility.locStringToFloat(value);
                                                       tryPutDataValue(iVal)
                                                   }
                                               } catch (e) {
                                                   value = _sOldValue;
                                                   setFocus();
                                                   return false
                                               }
                                               return true
                                           }

                                           function getDataValue() {
                                               var iVal = "int" == this.dt
                                                   ? Mscrm.NumberUtility.locStringToInt(value)
                                                   : Mscrm.NumberUtility.locStringToFloat(value);
                                               return NaN == iVal || "" == value ? null : iVal
                                           }

                                           function putDataValue(iVal) {
                                               var bValidValue = true;
                                               if (null == iVal)
                                                   value = "";
                                               else if (typeof iVal == "number" || typeof iVal == "float")
                                                   try {
                                                       tryPutDataValue(iVal)
                                                   } catch (e) {
                                                       bValidValue = false
                                                   }
                                               else {
                                                   alert(LOCID_DEVERROR_BADDATATYPE_INT);
                                                   bValidValue = false
                                               }
                                               if (bValidValue) {
                                                   var fDataChangeHandler = this.DataChangeHandler;
                                                   fDataChangeHandler &&
                                                       fDataChangeHandler()
                                               }
                                           }

                                           function getPrecision() {
                                               try {
                                                   return parseInt(this.acc, 10)
                                               } catch (e) {
                                                   return 2
                                               }
                                           }

                                           function setPrecision(iVal) {
                                               if (ValidateNewPrecision(iVal)) {
                                                   this.acc = iVal.toString();
                                                   var fPrecisionChangeHandler = this.PrecisionChangeHandler;
                                                   fPrecisionChangeHandler &&
                                                       fPrecisionChangeHandler(iVal);
                                                   putDataValue(getDataValue())
                                               }
                                           }

                                           function ValidateNewPrecision(iVal) {
                                               if (typeof iVal != "number" ||
                                                   iVal < 0 ||
                                                   this.dt == "money" && iVal > 4 ||
                                                   this.dt == "int" && iVal != 0 ||
                                                   this.dt == "decimal" && iVal > 10 ||
                                                   this.dt == "float" && iVal > 5 ||
                                                   IsNull(this.dt) && iVal > 10) {
                                                   alert(LOCID_ACCURACY_RANGE_MESSAGE);
                                                   return false
                                               }
                                               var bIsValid = true,
                                                   fSmallestValue = Math.pow(10, -iVal),
                                                   iMin = this.min / fSmallestValue,
                                                   iMax = this.max / fSmallestValue;
                                               bIsValid = iMax - iMin > 1;
                                               bIsValid = iMin == Math.round(iMin) || bIsValid;
                                               bIsValid = iMax == Math.round(iMax) || bIsValid;
                                               !bIsValid &&
                                                   alert(LOCID_PRECISION_RANGE_MESSAGE);
                                               return bIsValid
                                           }

                                           function getMin() {
                                               try {
                                                   return parseFloat(this.min)
                                               } catch (e) {
                                                   return -9e14
                                               }
                                           }

                                           function getMax() {
                                               try {
                                                   return parseFloat(this.max)
                                               } catch (e) {
                                                   return 9e14
                                               }
                                           }

                                           function getDisabled() {
                                               return this.disabled
                                           }

                                           function setDisabled(bValue) {
                                               var re =
                                                       /(?:\sms-crm-ReadOnly$)|(?:^ms-crm-ReadOnly\s)|(?:\sms-crm-ReadOnly\s)/gi,
                                                   s = this.className.replace(re, "");
                                               this.className = bValue ? s + " ms-crm-ReadOnly" : s;
                                               this.disabled = bValue;
                                               this.contentEditable = bValue ? "false" : "true";
                                               !IsNull(element.onDisabled) &&
                                                   element.onDisabled(bValue)
                                           }

                                           function setFocus() {
                                               try {
                                                   !IsNull(this.form) &&
                                                       this.form.className == "ms-crm-Form" &&
                                                       this.form.GetTab(element, true);
                                                   element.focus();
                                                   element.select()
                                               } catch (e) {
                                               }
                                           }

                                           function fireOnChange() {
                                               this.fireEvent("onchange")
                                           }

                                           function getRequiredLevel() {
                                               try {
                                                   if (IsNull(this.req))
                                                       return FIELD_NOT_REQUIRED;
                                                   else
                                                       return parseInt(this.req, 10)
                                               } catch (e) {
                                                   return FIELD_NOT_REQUIRED
                                               }
                                           }

                                       </script>
</public:component>