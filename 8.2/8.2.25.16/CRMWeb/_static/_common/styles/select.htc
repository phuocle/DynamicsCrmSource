<public:component lightweight="true">
<public:attach event="oncontentready"	onevent="init()"/>
<public:attach event="onmouseup"		onevent="mouseUp()"/>
<public:attach event="onkeydown"		onevent="handleKey()"/>
<public:attach event="onblur"           onevent="onBlur()"/>
<public:attach event="onfocus"          onevent="onFocus()"/>
<public:attach event="ondetach"			onevent="onDetach()" />
<public:method name="on"/>
<public:method name="disable"/>
<public:method name="enable"/>
<public:method name="setOpen"/>
<public:method name="handleClick"/>
<public:method name="reset"/>
<public:method name="setValue"/>
<public:method name="getValueIndex"/>
<public:method name="getValue"/>
<public:method name="SetFocus"/>
<public:method name="fireReturnValChange"/>
<public:property name="req" value="0"/>
<public:property id="allowValueEditProperty" name="allowValueEdit" get="getAllowValueEdit" put="setAllowValueEdit"/>
<public:property id="returnValueProperty" name="returnValue" get="getReturnValue"/>
<public:property name="isInitialized" get="getInitialized"/>
<public:event id="eventOnReturnValueChange" name="onreturnvaluechange"/>
<public:event id="eventOnValidate" name="onvalidate"/>
<public:event id="eventOnFindNextSmallestEntry" name="onfindnextsmallestentry"/>
<public:event id="eventOnInitComplete" name="oninitcomplete"/>
<public:event id="eventOnControlFocus" name="oncontrolfocus"/>
<public:event id="eventOnControlBlur" name="oncontrolblur"/>
<script language="JavaScript"></script><script type="text/javascript">

var _iY = 121,
    _oTbl,
    _oIn,
    _oPop,
    _bOpen = false,
    _bAllowValueEdit = false,
    _bInOnBlur = false,
    _bIsInitialized = false,
    _sDefaultBGColor = "",
    _sDefaultImeMode = "auto",
    VALUE_DOESNT_EXIST = -1,
    VALUE_IS_CUSTOM = -2;
function init()
{
    var bInitDisable = false;
    try
    {
        oParent = element.parentElement.parentElement.parentElement.parentElement.parentElement;
        if(oParent.className == "ms-crm-DateTime")
            if(!IsNull(oParent.initialDisableInit) && oParent.initialDisableInit == "true")
                bInitDisable = true
    }
    catch(e)
    {
    }
    _sDefaultBGColor = CrmEncodeDecode.CrmHtmlAttributeEncode(element.defaultbgcolor);
    if(typeof _sDefaultBGColor == "undefined")
        _sDefaultBGColor = "";
    _sDropDownFontSize = CrmEncodeDecode.CrmHtmlAttributeEncode(element.dropdownfontsize);
    if(typeof _sDropDownFontSize == "undefined")
        _sDropDownFontSize = "11";
    _sDefaultImeMode = CrmEncodeDecode.CrmHtmlAttributeEncode(element.defaultimemode);
    if(window.document.media == "print" || bInitDisable)
        return false;
    var s = "<table id='selectTable' onmouseout='parentElement.setOpen();' onmouseover='parentElement.setOpen();' style='table-layout:fixed;width:100%;' cellspacing=0 cellpadding=0><col><col width=18><tr><td><input style='background-color:" + _sDefaultBGColor + ";ime-mode:" + _sDefaultImeMode + ";' crmType='sel'";
    if(this.changeHandler)
        s += ' onchange="if(returnValue!=lastValue){' + changeHandler + '(this);}"';
    if(this.tabbingIndex)
        s += ' tabindex="' + tabbingIndex + '"';
    if(!_bAllowValueEdit)
        s += " contenteditable='false'";
    var sImageAlt = LOCID_SELECTBOX_BUTTON_ALT;
    if(!IsNull(this.ButtonTitle))
        sImageAlt = this.ButtonTitle;
    s += " onselectstart='if (!parentElement.parentElement.parentElement.parentElement.parentElement.allowValueEdit){return false;}else{return true;}' class='ms-crm-SelectBox' onfocus=\"if (!parentElement.parentElement.parentElement.parentElement.parentElement.allowValueEdit){runtimeStyle.backgroundColor='#abc0e7'};\" onblur=\"runtimeStyle.backgroundColor='" + _sDefaultBGColor + '\';" lastValue="' + value + '" returnValue="' + value + '" name="' + name + '"></td><td><img alt="' + sImageAlt + "\" onmouseover=\"if (!disabled) { src='/_imgs/selectOn.gif';";
    if(LOCID_UI_DIR == "RTL")
        s += " this.style.filter='FlipH()';";
    s += "}\" onmouseout=\"if (!disabled) src='/_imgs/selectOff.gif';\" class='select_htc_img_selectOff' align='absmiddle' src='/_imgs/selectOff.gif'></td></tr></table>" + innerHTML;
    innerHTML = s;
    var i = 0,
        iRowCount = children[1].rows.length;
    while(i < iRowCount)
    {
        if(getValue(i) == value)
            break;
        i++
    }
    if(i >= iRowCount)
        i = value.length == 0 ? 0 : VALUE_IS_CUSTOM;
    _oIn = firstChild.rows[0].cells[0].firstChild;
    if(isListItemRow(i))
    {
        _oIn.value = getDisplayValue(i);
        _oIn.returnValue = getValue(i)
    }
    else
    {
        _oIn.value = value;
        _oIn.returnValue = value
    }
    _oIn.defaultValue = _oIn.returnValue;
    _oIn.oldDisplayValue = _oIn.value;
    _oIn.rowNum = getValueIndex(_oIn.value);
    _oIn.htc = this;
    _oIn.req = req;
    _oIn.attachEvent("onblur",onBlur);
    _oIn.attachEvent("onfocus",onFocus);
    children[1].bCached && 
        children[1].removeAttribute("bCached");
    setAllowValueEdit(_bAllowValueEdit);
    this.element.disabled && 
        disable();
    _bIsInitialized = true;
    setAllowValueEdit(_bAllowValueEdit);
    this.setdisabled && 
        internalDisable(true);
    eventOnInitComplete.fire()
}
function onDetach()
{
    try
    {
        if(_oIn != null)
        {
            _oIn.detachEvent("onblur",onBlur);
            _oIn.detachEvent("onfocus",onFocus)
        }
        if(typeof element !== "undefined")
        {
            var selectTable = element.all["selectTable"];
            !IsNull(selectTable) && 
                selectTable.parentNode.removeChild(selectTable)
        }
    }
    catch(e)
    {
    }
}
function getSurroundingEntries(sValue)
{
    var oRVal = {};
    if(isListItemRow(_oIn.rowNum))
    {
        oRVal.iPrevious = _oIn.rowNum - 1;
        oRVal.iNext = _oIn.rowNum + 1
    }
    else
    {
        var oEvent = createEventObject();
        oEvent.inputValue = sValue;
        eventOnFindNextSmallestEntry.fire(oEvent);
        if(typeof oEvent.sEntry != "undefined")
        {
            var iIndex = getValueIndex(oEvent.sEntry);
            oRVal.iPrevious = iIndex;
            oRVal.iNext = iIndex + 1
        }
        else
        {
            oRVal.iPrevious = 0;
            oRVal.iNext = 1
        }
    }
    if(oRVal.iPrevious < 0)
    {
        oRVal.iPrevious = 0;
        oRVal.iNext = _oTbl.rows.length > 1 ? 1 : 0
    }
    else
        if(oRVal.iNext >= _oTbl.rows.length)
        {
            oRVal.iNext = _oTbl.rows.length - 1;
            oRVal.iPrevious = _oTbl.rows.length > 1 ? oRVal.iNext - 1 : oRVal.iNext
        }
    return oRVal
}
function getInitialized()
{
    return _bIsInitialized
}
function onFocus()
{
    var oEvent = createEventObject();
    eventOnControlFocus.fire(oEvent)
}
function onBlur()
{
    if(_bInOnBlur)
        return;
    _bInOnBlur = true;
    if(_bAllowValueEdit)
        if(_oIn.value != _oIn.oldDisplayValue)
        {
            var oResult = isValidInput(_oIn.value);
            if(oResult.isValid)
            {
                _oIn.value = oResult.sFormattedInput;
                _oIn.returnValue = oResult.sUnderylingValue;
                _oIn.oldDisplayValue = _oIn.value;
                fireReturnValChange();
                _oIn.rowNum = getValueIndex(_oIn.returnValue);
                var oEvent = createEventObject();
                eventOnControlBlur.fire(oEvent)
            }
            else
            {
                _oIn.value = _oIn.oldDisplayValue;
                if(!_oIn.disabled && !isElementHidden(_oIn))
                    try
                    {
                        _oIn.focus()
                    }
                    catch(e)
                    {
                    }
            }
        }
    _bInOnBlur = false
}
function isElementHidden(el)
{
    if(IsNull(el))
        return true;
    while(!IsNull(el) && !IsNull(el.tagName) && el.tagName.toLowerCase() != "body")
    {
        if(el.style.display == "none" || el.style.visibility == "hidden")
            return true;
        el = el.parentElement
    }
    return false
}
function isValidInput(sInput)
{
    var iValueIndex = getDisplayValueIndex(sInput),
        oResult,
        blockingBlur = false;
    if(!IsNull(event) && event.type == "keydown")
    {
        blockingBlur = true;
        _bInOnBlur = true
    }
    var oEvent = createEventObject();
    oEvent.inputValue = _oIn.value;
    oEvent.valueIndex = iValueIndex;
    oEvent.type = "onvalidate";
    eventOnValidate.fire(oEvent);
    if(typeof oEvent.returnValue == "undefined")
        oResult = validateCustomValue(sInput,iValueIndex);
    else
        if(oEvent.returnValue == true)
        {
            iValueIndex = getDisplayValueIndex(oEvent.formattedValue);
            oResult = validateCustomValue(oEvent.formattedValue,iValueIndex)
        }
        else
        {
            oResult = {};
            oResult.isValid = false
        }
    if(blockingBlur == true)
        _bInOnBlur = false;
    return oResult
}
function validateCustomValue(sInput,iValueIndex)
{
    var oResult = {};
    oResult.isValid = true;
    oResult.sFormattedInput = sInput;
    if(iValueIndex == VALUE_IS_CUSTOM)
    {
        var iValueIndex = getValueIndex(oResult.sFormattedInput);
        if(iValueIndex == VALUE_IS_CUSTOM)
            oResult.sUnderylingValue = sInput;
        else
        {
            oResult.sFormattedInput = getDisplayValue(iValueIndex);
            oResult.sUnderylingValue = getValue(iValueIndex)
        }
    }
    else
        oResult.sUnderylingValue = getValue(iValueIndex);
    return oResult
}
function getReturnValue()
{
    return _oIn.returnValue
}
function getAllowValueEdit()
{
    return _bAllowValueEdit
}
function setAllowValueEdit(bAllow)
{
    _bAllowValueEdit = bAllow;
    if(readyState == "complete" && _bIsInitialized)
    {
        _oIn.contentEditable = bAllow;
        allowValueEditProperty.fireChange()
    }
}
function getOptionCount()
{
    return this.children[1].rows.length
}
function getDisplayValue(i)
{
    var oRows = this.children[1].rows;
    if(i < 0 || i >= oRows.length)
        return null;
    return oRows[i].cells[0].innerText
}
function getValue(i)
{
    var oRows = this.children[1].rows;
    if(i < 0 || i >= oRows.length)
        return false;
    return oRows[i].cells[0].val
}
function getDisplayValueIndex(sVal)
{
    if(sVal == "")
        return VALUE_DOESNT_EXIST;
    for(var iCount = getOptionCount(),
        i = 0; i < iCount; i++)
        if(getDisplayValue(i) == sVal)
            return i;
    return VALUE_IS_CUSTOM
}
function getValueIndex(sVal)
{
    if(sVal == "")
        return VALUE_DOESNT_EXIST;
    for(var iCount = getOptionCount(),
        i = 0; i < iCount; i++)
        if(getValue(i) == sVal)
            return i;
    return VALUE_IS_CUSTOM
}
function setValue(sVal,sReturnValue,fDoNotFire)
{
    var iRow = getValueIndex(sVal);
    if(isListItemRow(iRow))
        setVals(iRow,fDoNotFire);
    else
    {
        _oIn.value = sVal;
        _oIn.oldDisplayValue = _oIn.value;
        if(!IsNull(sReturnValue))
            _oIn.returnValue = sReturnValue;
        else
            _oIn.returnValue = sVal;
        _oIn.rowNum = iRow;
        (IsNull(fDoNotFire) || fDoNotFire == false) && 
            fireReturnValChange()
    }
}
function fireReturnValChange()
{
    returnValueProperty.fireChange();
    var oEvent = createEventObject();
    oEvent.inputValue = _oIn.returnValue;
    oEvent.type = "returnvaluechange";
    eventOnReturnValueChange.fire(oEvent)
}
function initBox()
{
    if(children[1].bCached)
        return;
    children[1].bCached = true;
    _oPop = openPopup();
    var oCol = element.document.createElement("COL");
    with(oCol.style)
        fontSize = _sDropDownFontSize + "px";
    oCol.className = "select_htc_col";
    with(children[1])
    {
        firstChild.insertBefore(oCol);
        onmouseover = "this.box.on(event);";
        onselectstart = "return false;";
        onclick = "this.box.handleClick(event);";
        style.width = "100%"
    }
    if(children[1].rows.length <= 6)
        _iY = children[1].rows.length * 17 + 2;
    var dir = "";
    if(LOCID_UI_DIR == "RTL")
        dir = " dir='rtl'";
    _oPop.document.body.innerHTML = "<span style='width:100%; height:" + _iY + "px; border:1px solid #000000; overflow-y:auto; overflow-x:hidden;'" + dir + ">" + children[1].outerHTML + "</span>";
    _oTbl = _oPop.document.body.firstChild.firstChild;
    _oTbl.style.display = "inline";
    _oTbl.box = this
}
function mouseUp()
{
    if(_oIn.disabled || _bAllowValueEdit && event.srcElement.tagName == "INPUT")
        return;
    _oIn.focus();
    if(!_bOpen)
    {
        showBox();
        focus()
    }
    _bOpen = !_bOpen
}
function hideBox()
{
    _bOpen = false;
    try
    {
        _oPop.hide();
        _oIn.focus();
        _oIn.fireEvent("onchange");
        isListItemRow(_oIn.rowNum) && 
            setColor(_oIn,_oTbl.rows[_oIn.rowNum])
    }
    catch(e)
    {
        return false
    }
}
function reset()
{
    children[1].bCached = false;
    _oIn.rowNum = 0
}
function internalDisable(b)
{
    var oTR = element.children[0].children[1].children[0],
        oSelectBox = oTR.children[0].children[0],
        oImg = oTR.children[1].children[0];
    if(b)
    {
        s = "default";
        oSelectBox.runtimeStyle.borderColor = "#cccccc";
        oSelectBox.className = "ms-crm-SelectBox ms-crm-ReadOnly";
        oImg.className = "ms-crm-ReadOnly";
        oImg.src = "/_imgs/selectGrey.gif";
        if(LOCID_UI_DIR == "RTL")
            oImg.style.filter = "FlipH()"
    }
    else
    {
        s = "hand";
        oSelectBox.runtimeStyle.borderColor = "";
        oSelectBox.className = "ms-crm-SelectBox";
        oImg.className = "ms-crm-SelectBox";
        oImg.src = "/_imgs/selectOff.gif";
        if(LOCID_UI_DIR == "RTL")
            oImg.style.filter = "FlipH()"
    }
    oSelectBox.disabled = b;
    with(element.children[0].rows[0])
    {
        cells[1].firstChild.style.cursor = s;
        cells[1].firstChild.disabled = b;
        disabled = b
    }
    element.disabled = b
}
function enable()
{
    internalDisable(false)
}
function disable()
{
    internalDisable(true)
}
function setOpen()
{
    _bOpen = _oPop && _oPop.isOpen
}
function showBox()
{
    _oIn.rowNum = getValueIndex(_oIn.returnValue);
    initBox();
    setDefault();
    _oPop.show(0,19,clientWidth,_iY,firstChild);
    var iTopIndex;
    if(isListItemRow(_oIn.rowNum))
        iTopIndex = _oIn.rowNum;
    else
    {
        oResult = getSurroundingEntries(_oIn.returnValue);
        iTopIndex = oResult.iPrevious
    }
    var span = _oPop.document.body.firstChild;
    span.scrollTop = span.firstChild.firstChild.children[iTopIndex].offsetTop
}
function on(o)
{
    o = o.srcElement.parentElement;
    if(o.tagName == "TR")
    {
        setColor(o,_oTbl.rows[_oIn.rowNum]);
        _oIn.rowNum = o.rowIndex
    }
}
function handleClick(o)
{
    if(o.srcElement.parentElement.rowIndex >= 0)
    {
        _oIn.rowNum = o.srcElement.parentElement.rowIndex;
        setVals(_oIn.rowNum);
        hideBox()
    }
}
function handleKey()
{
    var i = event.keyCode;
    if(i == KEY_TAB && _bOpen)
    {
        _oIn.focus();
        return
    }
    switch(i)
    {
        case KEY_UP:
        case KEY_DOWN:
        case KEY_ENTER:
            initBox();
            !_bOpen && 
                setDefault();
            if(i != KEY_ENTER && event.altKey)
            {
                _oPop.isOpen ? hideBox() : showBox();
                return
            }
            break;
        default:
            return
    }
    var bReturnValueChanged = false;
    if(_bAllowValueEdit)
        if(_oIn.value != _oIn.oldDisplayValue)
        {
            var oResult = isValidInput(_oIn.value);
            if(oResult.isValid)
            {
                _oIn.rowNum = getDisplayValueIndex(oResult.sFormattedInput);
                _oIn.returnValue = oResult.sFormattedInput;
                bReturnValueChanged = true
            }
            else
            {
                _oIn.value = _oIn.oldDisplayValue;
                if(!_oIn.disabled && !isElementHidden(_oIn))
                    try
                    {
                        _oIn.focus()
                    }
                    catch(e)
                    {
                    }
            }
        }
    switch(i)
    {
        case KEY_UP:
            oResult = getSurroundingEntries(_oIn.returnValue);
            if(oResult.iPrevious == _oIn.rowNum)
                break;
            var oPreviousEntry;
            if(isListItemRow(_oIn.rowNum))
                oPreviousEntry = _oTbl.rows[_oIn.rowNum];
            else
                oPreviousEntry = null;
            var oNewEntry = _oTbl.rows[oResult.iPrevious];
            setColor(oNewEntry,oPreviousEntry,true);
            setVals(oResult.iPrevious);
            _oIn.fireEvent("onchange");
            break;
        case KEY_DOWN:
            oResult = getSurroundingEntries(_oIn.returnValue);
            if(oResult.iNext == _oIn.rowNum)
                break;
            var oPreviousEntry;
            if(isListItemRow(_oIn.rowNum))
                oPreviousEntry = _oTbl.rows[_oIn.rowNum];
            else
                oPreviousEntry = null;
            var oNewEntry = _oTbl.rows[oResult.iNext];
            setColor(oNewEntry,oPreviousEntry,true);
            setVals(oResult.iNext);
            _oIn.fireEvent("onchange");
            break;
        case KEY_ENTER:
            hideBox();
            if(bReturnValueChanged)
            {
                _oIn.fireEvent("onchange");
                fireReturnValChange()
            }
            break
    }
    event.cancelBubble = true;
    event.returnValue = false
}
function setVals(_iIndex,fDoNotFire)
{
    with(element.children[1].rows[_iIndex].cells[0])
    {
        _oIn.lastValue = _oIn.returnValue;
        _oIn.value = innerText;
        _oIn.oldDisplayValue = _oIn.value;
        _oIn.returnValue = val;
        _oIn.rowNum = _iIndex
    }
    (IsNull(fDoNotFire) || fDoNotFire == false) && 
        fireReturnValChange()
}
function setColor(oOn,oOff,bScroll)
{
    bScroll && 
        oOn.scrollIntoView();
    if(oOn != oOff)
    {
        if(oOn != null)
            oOn.runtimeStyle.backgroundColor = "#abc0e7";
        if(oOff != null)
            oOff.runtimeStyle.backgroundColor = _sDefaultBGColor
    }
}
function setDefault()
{
    for(var oRows = _oTbl.rows,
        i = 0; i < oRows.length; i++)
        setColor(null,oRows[i]);
    isListItemRow(_oIn.rowNum) && 
        setColor(_oTbl.rows[_oIn.rowNum],null)
}
function SetFocus()
{
    _oIn.focus()
}
function isListItemRow(iRowId)
{
    return iRowId != VALUE_DOESNT_EXIST && iRowId != VALUE_IS_CUSTOM
}

</script>
</public:component>
