<public:component lightweight="true">
<public:attach event="ondocumentready" onevent="initDocumentReady()"/>
<public:attach event="ondetach" onevent="onDetach()"/>
<public:method name="InitPresence"/>
<public:method name="prepareEnablePresence"/>
<script type="text/javascript"></script><script type="text/javascript">

var _bPresenceControlInited = false,
    _presenceControl = null,
    _entityIdToControlMap = null,
    _presenceStateDictionary = null,
    _presenceSipDictionary = null,
    presenceScrollManager = null,
    _vFirstViewHasPresence = null,
    _iTimerId = -1,
    _isActive = true;
function InitPresence()
{
    initAppGridPresence()
}
function createPresenceControl()
{
    if(!_bPresenceControlInited)
    {
        try
        {
            var pc = createPresenceControlInstance();
            if(pc && pc.PresenceEnabled)
                _presenceControl = pc
        }
        catch(e)
        {
        }
        _bPresenceControlInited = true;
        if(_presenceControl)
            _presenceControl.OnStatusChange = onPresenceControlOnStatusChange
    }
    return _presenceControl
}
function disposePresenceControl()
{
    if(_presenceControl)
    {
        destroyPresenceControlInstance(_presenceControl);
        _presenceControl = null;
        _bPresenceControlInited = false
    }
}
function initDocumentReady()
{
    if(window.document.media != "print")
    {
        initAppGridPresence();
        attachWindowOnUnload(disposePresenceControl)
    }
}
function initAppGridPresence()
{
    if(window.document.media != "print")
    {
        _isActive = true;
        if(_bPresenceEnabled)
        {
            element.detachEvent("onrefresh",initAppGridPresence);
            element.attachEvent("onrefresh",initAppGridPresence);
            _iTimerId = window.setTimeout(prepareEnablePresence,100)
        }
    }
}
function onDetach()
{
    try
    {
        _iTimerId != -1 && 
            window.clearTimeout(_iTimerId);
        _iTimerId = -1;
        _isActive = false;
        disposePresenceControl()
    }
    catch(e)
    {
    }
}
function getPresenceRequest()
{
    var aoPresenceInfo = [];
    if(IsNull(element.InnerGrid))
        return aoPresenceInfo;
    var i,
        oIds = {};
    _entityIdToControlMap = {};
    var aoSPANS = element.InnerGrid.getElementsByTagName("SPAN");
    for(i = 0; i < aoSPANS.length; i++)
    {
        var oSpan = aoSPANS[i];
        hasSipAttribute(oSpan) && 
            CheckControlForPresence(aoPresenceInfo,oIds,oSpan,oSpan.otype,oSpan.oid)
    }
    return aoPresenceInfo
}
function CheckControlForPresence(aoPresenceInfo,oIds,oControl,iTypeCode,sEntityId)
{
    if(!IsNull(iTypeCode) && IsPresenceType(iTypeCode))
    {
        if(IsNull(_entityIdToControlMap))
            _entityIdToControlMap = {};
        if(IsNull(_entityIdToControlMap[sEntityId]))
            _entityIdToControlMap[sEntityId] = [];
        _entityIdToControlMap[sEntityId].push(oControl);
        if(oIds[sEntityId] !== 1)
        {
            aoPresenceInfo.push(createPresenceInfo(sEntityId,oControl.sip));
            oIds[sEntityId] = 1
        }
    }
}
function presenceUpdateState(oid,state,attachEvents)
{
    var imgSrc = getPresenceUri(state);
    if(_entityIdToControlMap !== null)
    {
        var aControls = _entityIdToControlMap[oid];
        if(!IsNull(aControls))
            for(var i = 0; i < aControls.length; i++)
            {
                var oControl = aControls[i];
                if(!IsNull(oControl) && oControl.tagName == "SPAN")
                {
                    var oImgSpan = oControl.firstChild;
                    if(!IsNull(oImgSpan) && oImgSpan.tagName == "IMG")
                    {
                        oImgSpan.className = "ms-crm-Lookup-PresenceItem";
                        oImgSpan.src = imgSrc
                    }
                    else
                    {
                        var innerHTML = '<IMG class=ms-crm-Lookup-PresenceItem alt="" src="' + CrmEncodeDecode.CrmHtmlAttributeEncode(imgSrc) + '">' + oControl.innerHTML;
                        oControl.innerHTML = innerHTML;
                        oImgSpan = oControl.firstChild
                    }
                    attachEvents && 
                        AttachPresenceEvents(oImgSpan)
                }
            }
    }
    _presenceStateDictionary[oid] = state
}
function presenceControlShowOOUIMouse()
{
    presenceControlShowOOUI(0)
}
function presenceControlShowOOUIFocus()
{
    presenceControlShowOOUI(1)
}
function presenceControlHideOOUI()
{
    _presenceControl.HideOOUI();
    if(!IsNull(_vFirstViewHasPresence) && !_vFirstViewHasPresence && getBrowserMajorVersion() == 6)
    {
        disposePresenceControl();
        createPresenceControl()
    }
}
function presenceControlShowOOUI(inputType)
{
    var oImg = window.event.srcElement,
        oId = null;
    if(oImg.parentElement.tagName == "SPAN")
        oId = oImg.parentElement.oid;
    if(oId != null)
    {
        var objRet = getImageLocation(oImg),
            oouiX = objRet.oouiX,
            oouiY = objRet.oouiY,
            sipUri = _presenceSipDictionary[oId];
        _presenceControl.ShowOOUI(sipUri,inputType,oouiX,oouiY)
    }
}
function onPresenceControlOnStatusChange(name,state,id)
{
    if(_presenceStateDictionary)
        _presenceStateDictionary[id] != state && 
            presenceUpdateState(id,state,false)
}
function presenceControlScroll()
{
    if(!presenceScrollManager.InScrollFunc)
    {
        presenceScrollManager.InScrollFunc = true;
        presenceControlHideOOUI();
        presenceScrollManager.InScrollFunc = false
    }
    return presenceScrollManager.OrigScrollFunc ? presenceScrollManager.OrigScrollFunc() : true
}
function prepareEnablePresence()
{
    _iTimerId = -1;
    if(!_isActive || this.id == null)
        return;
    try
    {
        var aoPresenceInfo = getPresenceRequest();
        if(aoPresenceInfo.length > 0 && createPresenceControl() && !IsNull(_presenceControl))
        {
            _presenceStateDictionary = {};
            _presenceSipDictionary = {};
            if(!presenceScrollManager)
            {
                var oDataArea = element.all[this.id + "_divDataArea"];
                if(!IsNull(oDataArea))
                {
                    presenceScrollManager = {};
                    presenceScrollManager.OrigScrollFunc = oDataArea.onscroll;
                    presenceScrollManager.InScrollFunc = false;
                    oDataArea.onscroll = presenceControlScroll
                }
            }
            enablePresence(aoPresenceInfo)
        }
        if(_vFirstViewHasPresence == null)
            _vFirstViewHasPresence = aoPresenceInfo.length > 0
    }
    catch(e)
    {
        if(_isActive)
            throw e
    }
}
function enablePresence(aoPresenceInfo)
{
    for(var i = 0; i < aoPresenceInfo.length; i++)
    {
        var oPresenceInfo = aoPresenceInfo[i];
        if(!IsNull(oPresenceInfo))
        {
            var oid = oPresenceInfo.oid,
                sipuri = oPresenceInfo.sipuri;
            if(!IsNull(_presenceControl) && !IsNull(sipuri) && sipuri.length > 0)
            {
                var state = _presenceControl.GetStatus(sipuri,oid);
                _presenceSipDictionary[oid] = sipuri;
                presenceUpdateState(oid,state,true)
            }
        }
    }
}
function AttachPresenceEvents(oImg)
{
    oImg.onmouseover = presenceControlShowOOUIMouse;
    oImg.onfocusin = presenceControlShowOOUIFocus;
    oImg.onmouseout = presenceControlHideOOUI;
    oImg.onfocusout = presenceControlHideOOUI
}

</script>
</public:component>
