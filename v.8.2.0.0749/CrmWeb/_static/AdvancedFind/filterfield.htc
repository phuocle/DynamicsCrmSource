<public:component lightweight="true" tagName=FilterField>
<public:attach event="ondocumentready" onevent="InitOnDocReady()"/>
<public:attach event="onclick" onevent="handleClick()"/>
<public:event name="onfieldchange" id="OnFieldChangeHandler"/>
<public:property name="Selected" get="GetSelected" put="SetSelected"/>
<public:property name="FetchXml" put="SetFetchXml"/>
<public:property name="HideInSimple" get="GetHideInSimple" put="SetHideInSimple"/>
<public:property name="Container"/>
<public:property name="ParentControl"/>
<public:property name="EntityName"/>
<public:property name="Defined"/>
<public:property name="Field" get="GetField" put="SetField"/>
<public:property name="Operator" get="GetOperator" put="SetOperator"/>
<public:property name="Value" get="GetValue" put="SetValue"/>
<public:method name="SetMode"/>
<public:method name="SetFocus"/>
<public:method name="GetFetchStartElement"/>
<html xmlns:Crm>
<script language="JavaScript"></script><script type="text/javascript">

                                           var OperandTypeNumber = 1,
                                               OperandTypeDateTime = 2,
                                               OperandTypeFiscalPeriod = 3,
                                               OperandTypeFiscalYear = 4,
                                               OperandTypeFiscalPeriodAndYear = 5,
                                               _oFldLst = null,
                                               _oMnuSpn = null,
                                               _oOpLst = null,
                                               _oValCtrl = null,
                                               _bSelected = false,
                                               _bHideInSimple = false,
                                               _sField = null,
                                               _sOperator = null,
                                               _oValue = null,
                                               _oPopupMenu = null,
                                               _oFetchXmlNode,
                                               _bInitialized = false;
                                           Sys.Application.add_load(SysInit);

                                           function SysInit() {
                                               Init()
                                           }

                                           function InitOnDocReady() {
                                               Sys.Application.get_isInitialized() &&
                                                   !_bInitialized &&
                                                   Init()
                                           }

                                           function Init() {
                                               Defined = false;
                                               var bErrorInFetch = false,
                                                   bWarningsInFetch = false,
                                                   oErr;
                                               if (!IsNull(_oFetchXmlNode)) {
                                                   oErr =
                                                       BuildLoadableCondition(_oFetchXmlNode,
                                                           EntityName,
                                                           Container.ClientCache);
                                                   if (oErr != null) {
                                                       bErrorInFetch = oErr.ErrorType == "ERROR";
                                                       bWarningsInFetch = oErr.ErrorType == "WARN"
                                                   }
                                               }
                                               if (bErrorInFetch) {
                                                   element
                                                       .innerHTML =
                                                       "<div class='ms-crm-AdvFind-FilterField'><img tabindex=0 src='/_imgs/ico/16_L_remove.gif' class='ms-crm-AdvFind-ButtonImage' align='middle' alt=\"" + CrmEncodeDecode.CrmHtmlAttributeEncode(LOCID_AF_DELERRCLAUSE) + "\"><img tabindex=0 src='/_imgs/error/notif_icn_warn16.png' align='middle' title=\"" + CrmEncodeDecode.CrmHtmlAttributeEncode(oErr.Message) + '" alt="' + CrmEncodeDecode.CrmHtmlAttributeEncode(oErr.Message) + "\"><span class='ms-crm-AdvFind-FilterFieldError'>" + CrmEncodeDecode.CrmHtmlEncode(LOCID_AF_ERRINCONDITION) + "</span></div>";
                                                   with (element.firstChild) {
                                                       children[0].onclick = DeleteClause;
                                                       children[0].onkeyup = DeleteClauseKey;
                                                       children[1].onkeyup = ShowErrInfo;
                                                       children[1].onclick = ShowErrInfo
                                                   }
                                                   FinishLoading(_oFetchXmlNode);
                                                   _bInitialized = true
                                               } else {
                                                   var oButtonImg = Mscrm.ImageStrip
                                                       .getImageInfo(Mscrm.CrmUri
                                                           .create("/_imgs/grid/Dropdown_Arrow.png"));
                                                   if (bWarningsInFetch) {
                                                       element
                                                           .innerHTML =
                                                           "<div class='ms-crm-AdvFind-FilterNewField'><span tabindex=0 style='visibility:hidden' class='ms-crm-AdvFind-FieldMenu'><img alt='' style='visibility:hidden' src='" + oButtonImg.source + "' class = 'ms-crm-View-icon " + oButtonImg.cssClass + "'/><a contentEditable='false' tabindex='-1' onclick='return false;' href='#' target='_self' title=\"" + CrmEncodeDecode.CrmHtmlAttributeEncode(LOCID_AF_OPT_ATNEWFIELD) + "\" class='atLink'></a></span><span class='ms-crm-AdvFind-FieldList'><Crm:FieldList/></span><span class='ms-crm-AdvFind-OperatorList'><Crm:OperatorList/></span><span class='ms-crm-AdvFind-ClientControl'><Crm:ClientControl/></span><span id='spnWarnIco'><img tabindex=0 src='/_imgs/error/notif_icn_warn16.png' align='middle' title=\"" + CrmEncodeDecode.CrmHtmlAttributeEncode(oErr.Message) + '" alt="' + CrmEncodeDecode.CrmHtmlAttributeEncode(oErr.Message) + "\"></span><span class='ms-crm-AdvFind-HiddenFieldLabel' style='visibility:hidden'>" + LOCID_AF_CLAUSEHIDDEN + "</span></div>";
                                                       with (element.firstChild.children[4].firstChild)
                                                           onkeyup = onclick = ShowErrInfo
                                                   } else
                                                       element
                                                           .innerHTML =
                                                           "<div class='ms-crm-AdvFind-FilterNewField'><span tabindex=0 style='visibility:hidden' class='ms-crm-AdvFind-FieldMenu'><img alt='' style='visibility:hidden' src='" + oButtonImg.source + "' class = 'ms-crm-View-icon " + oButtonImg.cssClass + "'/><a contentEditable='false' tabindex='-1' onclick='return false;' href='#' target='_self' title=\"" + CrmEncodeDecode.CrmHtmlAttributeEncode(LOCID_AF_OPT_ATNEWFIELD) + "\" class='atLink'></a></span><span class='ms-crm-AdvFind-FieldList'><Crm:FieldList/></span><span class='ms-crm-AdvFind-OperatorList'><Crm:OperatorList/></span><span class='ms-crm-AdvFind-ClientControl'><Crm:ClientControl/></span><span class='ms-crm-AdvFind-HiddenFieldLabel' style='visibility:hidden'>" + LOCID_AF_CLAUSEHIDDEN + "</span></div>";
                                                   _bInitialized = true;
                                                   with (element.firstChild) {
                                                       var sId = ParentControl.id;
                                                       _oFldLst = children[1].firstChild;
                                                       _oFldLst.RelatedEntitiesVisible = false;
                                                       _oOpLst = children[2].firstChild;
                                                       _oValCtrl = children[3].firstChild;
                                                       lastChild.id = sId + "FLDPRM";
                                                       _oMnuSpn = firstChild;
                                                       _oMnuSpn.id = sId + "FLDMNU";
                                                       _oMnuSpn.onkeyup = onMnuKeyUp
                                                   }
                                                   with (_oMnuSpn) {
                                                       lastChild.id = "at" + id;
                                                       onclick = ShowPopupMenu;
                                                       onmouseenter = OnMouseEnter;
                                                       onmouseleave = OnMouseLeave
                                                   }
                                                   with (_oFldLst) {
                                                       attachEvent("onchange", FieldChanged);
                                                       ParentControl = element;
                                                       Container = element.Container;
                                                       EntityName = element.EntityName
                                                   }
                                                   with (_oOpLst) {
                                                       attachEvent("onchange", OperatorChanged);
                                                       ParentControl = element;
                                                       Container = element.Container;
                                                       style.display = "none"
                                                   }
                                                   with (_oValCtrl) {
                                                       ParentControl = element;
                                                       Container = element.Container;
                                                       style.display = "none";
                                                       bWarningsInFetch &&
                                                           attachEvent("onchange", valChangeHandler)
                                                   }
                                                   SetFetchXml(_oFetchXmlNode);
                                                   SetField(_sField);
                                                   SetOperator(_sOperator);
                                                   SetValue(_oValue);
                                                   _bFocus &&
                                                       SetFocus();
                                                   SetHideInSimple(_bHideInSimple);
                                                   if (Container.Mode == Container.ModesEnum.Simple) {
                                                       _oMnuSpn.style.display = "none";
                                                       if (IsNull(_sField))
                                                           element.style.display = "none"
                                                   }
                                               }
                                               _oFetchXmlNode = null;
                                               SetMode(Container.Mode, true)
                                           }

                                           function FinishLoading(oConditionNode) {
                                               if (IsNull(oConditionNode))
                                                   return;
                                               var attr = oConditionNode.ownerDocument.createAttribute("done");
                                               oConditionNode.attributes.setNamedItem(attr)
                                           }

                                           function onMnuKeyUp() {
                                               (event.keyCode == KEY_SPACE || event.keyCode == KEY_ENTER) &&
                                                   ShowPopupMenu()
                                           }

                                           function OnMouseEnter() {
                                               if (Defined)
                                                   _oMnuSpn.className = "ms-crm-AdvFind-SelectedFieldMenu"
                                           }

                                           function OnMouseLeave() {
                                               if (Defined)
                                                   _oMnuSpn.className = "ms-crm-AdvFind-FieldMenu"
                                           }

                                           function GetMenuImg() {
                                               return element.firstChild.firstChild.firstChild
                                           }

                                           function GetOuterDiv() {
                                               return element.firstChild
                                           }

                                           function GetHideInSimpleSpan() {
                                               return element.firstChild.lastChild
                                           }

                                           function SetMode(iMode, bFromInit) {
                                               var bSimple = iMode == Container.ModesEnum.Simple;
                                               GetOuterDiv()
                                                   .className =
                                                   bSimple
                                                   ? "ms-crm-AdvFind-FilterSimpleField"
                                                   : Selected
                                                   ? "ms-crm-AdvFind-SelectedFilterField"
                                                   : "ms-crm-AdvFind-FilterField";
                                               if (!Defined)
                                                   return;
                                               _oMnuSpn.style.display = bSimple ? "none" : "inline";
                                               ShowIfDetailedOrNotHidden(element, !_bHideInSimple && Defined, iMode);
                                               if (_oFldLst) {
                                                   if (IsNull(bFromInit) || !bFromInit) {
                                                       _oFldLst.SetMode(iMode);
                                                       _oOpLst.SetMode(iMode)
                                                   }
                                                   _oFldLst.parentElement
                                                       .className =
                                                       bSimple
                                                       ? "ms-crm-AdvFind-SimpleFieldList"
                                                       : "ms-crm-AdvFind-FieldList";
                                                   _oOpLst.parentElement
                                                       .className =
                                                       bSimple
                                                       ? "ms-crm-AdvFind-SimpleOperatorList"
                                                       : "ms-crm-AdvFind-OperatorList"
                                               }
                                           }

                                           var _bFocus = false;

                                           function SetFocus() {
                                               _bFocus = true;
                                               if (_bInitialized) {
                                                   _oFldLst.SetFocus();
                                                   _bFocus = false
                                               }
                                           }

                                           function GetSelected() {
                                               return _bSelected
                                           }

                                           function SetSelected(bSelect) {
                                               _bSelected = bSelect;
                                               if (_bInitialized)
                                                   GetOuterDiv()
                                                       .className =
                                                       bSelect
                                                       ? "ms-crm-AdvFind-SelectedFilterField"
                                                       : "ms-crm-AdvFind-FilterField"
                                           }

                                           function ToggleSelected() {
                                               !IsNull(_oPopupMenu) &&
                                                   _oPopupMenu.Hide();
                                               Selected = !_bSelected
                                           }

                                           function GetHideInSimple() {
                                               return _bHideInSimple
                                           }

                                           function SetHideInSimple(bValue) {
                                               _bHideInSimple = bValue;
                                               if (_bInitialized)
                                                   GetHideInSimpleSpan().style
                                                       .visibility = !_bHideInSimple || !Defined ? "hidden" : "visible"
                                           }

                                           function GetField() {
                                               return _oFldLst.Value
                                           }

                                           function SetField(sField) {
                                               _sField = sField;
                                               if (_bInitialized) {
                                                   _oFldLst.Value = _sField;
                                                   Defined = !IsNull(_sField)
                                               }
                                           }

                                           function GetOperator() {
                                               return _oOpLst.Value
                                           }

                                           function SetOperator(sOperator) {
                                               _sOperator = sOperator;
                                               if (_bInitialized) {
                                                   _oOpLst.Value = sOperator;
                                                   if (Defined)
                                                       _oOpLst.style.display = "inline"
                                               }
                                           }

                                           function GetValue() {
                                               return _oValCtrl.Value
                                           }

                                           function SetValue(oValue) {
                                               _oValue = oValue;
                                               if (_bInitialized) {
                                                   _oValCtrl.Value = oValue;
                                                   if (Defined)
                                                       _oValCtrl.style.display = "inline"
                                               }
                                           }

                                           function handleClick() {
                                               if (event.ctrlKey) {
                                                   ToggleSelected();
                                                   event.cancelBubble = true
                                               }
                                           }

                                           function ShowPopupMenu() {
                                               var bIsATLink = false;
                                               if (!IsNull(event) && !IsNull(event.srcElement))
                                                   if (event.srcElement.className == "atLink")
                                                       bIsATLink = true;
                                               HideVisibleControl(element.Container);
                                               _oPopupMenu = new PopupMenu;
                                               with (_oPopupMenu) {
                                                   AddMenuItem(_bSelected ? LOCID_AF_UNSELECTROW : LOCID_AF_SELECTROW,
                                                       ToggleSelected);
                                                   AddMenuItem(_bHideInSimple
                                                       ? LOCID_AF_SHOWINSIMPLE
                                                       : LOCID_AF_HIDEINSIMPLE,
                                                       ToggleHideInSimple);
                                                   AddMenuItem(LOCID_AF_MNUITMDELETE, DeleteClause);
                                                   Show(0,
                                                       event.srcElement.offsetHeight,
                                                       null,
                                                       null,
                                                       event.srcElement,
                                                       bIsATLink)
                                               }
                                           }

                                           function ToggleHideInSimple() {
                                               !IsNull(_oPopupMenu) &&
                                                   _oPopupMenu.Hide();
                                               HideInSimple = !_bHideInSimple;
                                               Container.IsDirty = true
                                           }

                                           function DeleteClause() {
                                               confirm(LOCID_AF_DELETEFIELD) &&
                                                   ParentControl.DeleteControl(element)
                                           }

                                           function GetFetchStartElement() {
                                               if (!Defined) {
                                                   alert(LOCID_AF_ERRINSOMECLAUSES);
                                                   return null
                                               }
                                               var sFetchXml = "",
                                                   sVals = "",
                                                   sVals2 = "";
                                               _sOperator = _oOpLst.Value;
                                               if (IsValueBoundOperator(_sOperator) &&
                                                   (IsNull(_oValCtrl.Value) || _oValCtrl.Value.toString() == ""))
                                                   switch (Container.FetchMode) {
                                                   case Container.FetchModesEnum.AlertEmpty:
                                                       alert(formatString(LOCID_AF_VALUEMISSINGFOR_MSG,
                                                           _oFldLst.GetFieldList().SelectedText));
                                                       Container.Mode == Container.ModesEnum.Simple &&
                                                           _oValCtrl._bHideInSimple &&
                                                           _oValCtrl.SetFocus();
                                                       return null;
                                                       break;
                                                   case Container.FetchModesEnum.SkipEmpty:
                                                   case Container.FetchModesEnum.Summary:
                                                       return "";
                                                       break;
                                                   default:
                                                       break
                                                   }
                                               if (Container.FetchMode == Container.FetchModesEnum.Summary) {
                                                   sFetchXml =
                                                       '<condition uiattributename="' +
                                                       CrmEncodeDecode
                                                       .CrmXmlEncode(_oFldLst.GetFieldList().SelectedText) +
                                                       '" uioperatorname="' +
                                                       CrmEncodeDecode
                                                       .CrmXmlEncode(_oOpLst.GetOperatorList().SelectedText) +
                                                       '" uiname="' +
                                                       (!IsValueBoundOperator(_sOperator) || IsNull(_oValCtrl.Value)
                                                           ? ""
                                                           : CrmEncodeDecode.CrmXmlEncode(_oValCtrl.Text)) +
                                                       (_bHideInSimple ? '" uihidden="1"/>' : '"/>');
                                                   return sFetchXml
                                               }
                                               var oField = _oFldLst.GetFieldList().options[_oFldLst.GetFieldList()
                                                       .selectedIndex],
                                                   sAttrName = _oFldLst.Value,
                                                   sDataType = Container.ClientCache.AbstractDataType(oField);
                                               if (!IsNull(oField["nameattr"]) && IsNameOperator(_sOperator)) {
                                                   sDataType = "string";
                                                   sAttrName = oField.nameattr
                                               }
                                               switch (sDataType) {
                                               case "owner":
                                               case "lookup":
                                               case "lookupwithuser":
                                               case "lookupwithbusinessunit":
                                                   var aoItems = _oValCtrl.Value;
                                                   if (IsValueBoundOperator(_sOperator) && !IsNull(aoItems)) {
                                                       var iLen = aoItems.length;
                                                       if (iLen > 1) {
                                                           for (var i = 0; i < iLen; i++)
                                                               with (aoItems[i])
                                                                   sVals +=
                                                                       '<value uiname="' +
                                                                       CrmEncodeDecode.CrmXmlEncode(name) +
                                                                       '" uitype="' +
                                                                       CrmEncodeDecode.CrmXmlEncode(typename) +
                                                                       '">' +
                                                                       id +
                                                                       "</value>";
                                                           sFetchXml =
                                                               '<condition attribute="' +
                                                               CrmEncodeDecode.CrmXmlEncode(sAttrName) +
                                                               '" operator="' +
                                                               (_sOperator == "eq" ? "in" : "not-in") +
                                                               (_bHideInSimple ? '" uihidden="1">' : '">') +
                                                               sVals +
                                                               "</condition>"
                                                       } else if (iLen == 1)
                                                           with (aoItems[0])
                                                               sFetchXml =
                                                                   '<condition attribute="' +
                                                                   CrmEncodeDecode.CrmXmlEncode(sAttrName) +
                                                                   '" operator="' +
                                                                   _sOperator +
                                                                   '" uiname="' +
                                                                   CrmEncodeDecode.CrmXmlEncode(name) +
                                                                   '" uitype="' +
                                                                   CrmEncodeDecode.CrmXmlEncode(typename) +
                                                                   '" value="' +
                                                                   id +
                                                                   (_bHideInSimple ? '" uihidden="1"/>' : '"/>')
                                                   } else
                                                       sFetchXml =
                                                           '<condition attribute="' +
                                                           CrmEncodeDecode.CrmXmlEncode(sAttrName) +
                                                           '" operator="' +
                                                           _sOperator +
                                                           '"' +
                                                           (_bHideInSimple ? ' uihidden="1"/>' : "/>");
                                                   break;
                                               case "picklist":
                                               case "language":
                                               case "objecttypecode":
                                                   sVals = _oValCtrl.Value;
                                                   if (IsValueBoundOperator(_sOperator) && !IsNull(sVals)) {
                                                       var aiVals = sVals.split(";");
                                                       sVals = "";
                                                       iLen = aiVals.length;
                                                       if (iLen > 1) {
                                                           for (var i = 0; i < iLen; i++)
                                                               sVals += "<value>" + aiVals[i] + "</value>";
                                                           sFetchXml =
                                                               '<condition attribute="' +
                                                               CrmEncodeDecode.CrmXmlEncode(sAttrName) +
                                                               '" operator="' +
                                                               (_sOperator == "eq" ? "in" : "not-in") +
                                                               (_bHideInSimple ? '" uihidden="1">' : '">') +
                                                               sVals +
                                                               "</condition>"
                                                       } else
                                                           sFetchXml =
                                                               '<condition attribute="' +
                                                               CrmEncodeDecode.CrmXmlEncode(sAttrName) +
                                                               '" operator="' +
                                                               _sOperator +
                                                               '" value="' +
                                                               aiVals[0] +
                                                               (_bHideInSimple ? '" uihidden="1"/>' : '"/>')
                                                   } else
                                                       sFetchXml =
                                                           '<condition attribute="' +
                                                           CrmEncodeDecode.CrmXmlEncode(sAttrName) +
                                                           '" operator="' +
                                                           _sOperator +
                                                           '"' +
                                                           (_bHideInSimple ? ' uihidden="1"/>' : "/>");
                                                   break;
                                               case "string":
                                               case "memo":
                                                   sVals = IsNull(_oValCtrl.Value) ? "" : _oValCtrl.Value;
                                                   switch (_sOperator) {
                                                   case "contains":
                                                   case "beginswith":
                                                   case "endswith":
                                                   case "doesnotcontain":
                                                   case "doesnotbeginwith":
                                                   case "doesnotendwith":
                                                       var o = _oOpLst.GetOperatorList();
                                                       sFetchVal = o.options[o.selectedIndex].fetchVal;
                                                       _sOperator = o.options[o.selectedIndex].fetchOp;
                                                       sVals = formatString(sFetchVal, ConvertUserTypeToLike(sVals))
                                                   }
                                                   sFetchXml =
                                                       '<condition attribute="' +
                                                       CrmEncodeDecode.CrmXmlEncode(sAttrName) +
                                                       '" operator="' +
                                                       _sOperator +
                                                       '"';
                                                   if (IsValueBoundOperator(_sOperator))
                                                       sFetchXml +=
                                                           ' value="' + CrmEncodeDecode.CrmXmlEncode(sVals) + '"';
                                                   sFetchXml += _bHideInSimple ? ' uihidden="1"/>' : "/>";
                                                   break;
                                               case "date":
                                                   sFetchXml =
                                                       '<condition attribute="' +
                                                       CrmEncodeDecode.CrmXmlEncode(sAttrName) +
                                                       '" operator="';
                                                   sFetchXml +=
                                                       (_sOperator == "anytime" ? "not-null" : _sOperator) + '"';
                                                   if (_bHideInSimple)
                                                       sFetchXml += ' uihidden="1"';
                                                   sVals = "";
                                                   sVals2 = "";
                                                   if (IsValueBoundOperator(_sOperator)) {
                                                       switch (GetDateOperandType(_sOperator)) {
                                                       case OperandTypeNumber:
                                                       case OperandTypeFiscalPeriod:
                                                       case OperandTypeFiscalYear:
                                                           sVals = _oValCtrl.Value;
                                                           break;
                                                       case OperandTypeFiscalPeriodAndYear:
                                                           var periodAndYear = _oValCtrl.Value;
                                                           Mscrm.CrmDebug
                                                               .assert(periodAndYear.length == 7,
                                                                   "Expect fiscal period and year values to be in YYYY-PP format.");
                                                           sVals = periodAndYear.substr(5, 2);
                                                           sVals2 = periodAndYear.substr(0, 4);
                                                           break;
                                                       case OperandTypeDateTime:
                                                       default:
                                                           if (!IsNull(_oValCtrl.Value)) {
                                                               sVals = FormatUtcDate(_oValCtrl.Value);
                                                               sVals = sVals.substr(0, sVals.length - 9)
                                                           }
                                                           break
                                                       }
                                                       if (!IsNull(_oValCtrl.Value))
                                                           if (sVals2 == "")
                                                               sFetchXml +=
                                                                   ' value="' +
                                                                   CrmEncodeDecode.CrmXmlEncode(sVals) +
                                                                   '"/>';
                                                           else {
                                                               sFetchXml +=
                                                                   "><value>" +
                                                                   CrmEncodeDecode.CrmXmlEncode(sVals) +
                                                                   "</value>";
                                                               sFetchXml +=
                                                                   "<value>" +
                                                                   CrmEncodeDecode.CrmXmlEncode(sVals2) +
                                                                   "</value>";
                                                               sFetchXml += "</condition>"
                                                           }
                                                       else
                                                           sFetchXml += "/>"
                                                   } else
                                                       sFetchXml += "/>";
                                                   break;
                                               default:
                                                   sFetchXml =
                                                       '<condition attribute="' +
                                                       CrmEncodeDecode.CrmXmlEncode(sAttrName) +
                                                       '" operator="' +
                                                       _sOperator +
                                                       '"';
                                                   if (IsValueBoundOperator(_sOperator))
                                                       sFetchXml +=
                                                           ' value="' +
                                                           (
                                                               IsNull(_oValCtrl.Value)
                                                                   ? ""
                                                                   : CrmEncodeDecode.CrmXmlEncode(_oValCtrl.Value)) +
                                                           '"';
                                                   sFetchXml += _bHideInSimple ? ' uihidden="1"/>' : "/>";
                                                   break
                                               }
                                               return sFetchXml
                                           }

                                           function ConstructOperatorAndValues(sDataType, oConditionNode) {
                                               _oValue = oConditionNode.getAttribute("value");
                                               if (_sOperator == "like" || _sOperator == "not-like") {
                                                   var bBeginPercent = _oValue.indexOf("%") == 0,
                                                       bEndPercent = _oValue.lastIndexOf("%") == _oValue.length - 1;
                                                   if (bBeginPercent && bEndPercent) {
                                                       _sOperator =
                                                           _sOperator == "like" ? "contains" : "doesnotcontain";
                                                       _oValue =
                                                           ConvertLikeToUserType(_oValue.substr(1, _oValue.length - 2))
                                                   } else if (bBeginPercent) {
                                                       _sOperator =
                                                           _sOperator == "like" ? "endswith" : "doesnotendwith";
                                                       _oValue = ConvertLikeToUserType(_oValue.substr(1))
                                                   } else if (bEndPercent) {
                                                       _sOperator =
                                                           _sOperator == "like" ? "beginswith" : "doesnotbeginwith";
                                                       _oValue =
                                                           ConvertLikeToUserType(_oValue.substr(0, _oValue.length - 1))
                                                   } else
                                                       _sOperator = _sOperator == "like" ? "eq" : "ne"
                                               }
                                               switch (sDataType) {
                                               case "lookup":
                                               case "owner":
                                                   var aoItems = [],
                                                       vType;
                                                   if (_sOperator == "in" || _sOperator == "not-in") {
                                                       for (var oValNodes = oConditionNode.selectNodes("value"),
                                                           iLen = oValNodes.length,
                                                           oNode,
                                                           i = 0;
                                                           i < iLen;
                                                           i++) {
                                                           oNode = oValNodes[i];
                                                           oItem = new LookupControlItem;
                                                           oItem.id = oNode.text;
                                                           oItem.name = oNode.getAttribute("uiname");
                                                           vType = oNode.getAttribute("uitype");
                                                           if (isNaN(parseInt(vType, 10)))
                                                               oItem.typename = vType;
                                                           else
                                                               oItem.type = vType;
                                                           if (IsNull(vType))
                                                               oItem.category = LookupItemCategories.UNKNOWN_TYPE;
                                                           if (IsNull(oItem.name))
                                                               oItem.name = oItem.id;
                                                           aoItems.push(oItem)
                                                       }
                                                       _sOperator = _sOperator == "in" ? "eq" : "ne"
                                                   } else if (!isNullOrEmptyString(_oValue)) {
                                                       oItem = new LookupControlItem;
                                                       oItem.id = oConditionNode.getAttribute("value");
                                                       oItem.name = oConditionNode.getAttribute("uiname");
                                                       vType = oConditionNode.getAttribute("uitype");
                                                       if (isNaN(parseInt(vType, 10)))
                                                           oItem.typename = vType;
                                                       else
                                                           oItem.type = vType;
                                                       if (IsNull(vType))
                                                           oItem.category = LookupItemCategories.UNKNOWN_TYPE;
                                                       if (IsNull(oItem.name))
                                                           oItem.name = oItem.id;
                                                       aoItems.push(oItem)
                                                   }
                                                   _oValue = aoItems.length != 0 ? aoItems : null;
                                                   break;
                                               case "picklist":
                                               case "language":
                                               case "objecttypecode":
                                                   if (_sOperator == "in" || _sOperator == "not-in") {
                                                       _oValue = "";
                                                       for (var oValNodes = oConditionNode.selectNodes("value"),
                                                           iLen = oValNodes.length,
                                                           i = 0;
                                                           i < iLen;
                                                           i++) {
                                                           _oValue += oValNodes[i].text;
                                                           _oValue += ";"
                                                       }
                                                       if (i != 0)
                                                           _oValue = _oValue.substr(0, _oValue.length - 1);
                                                       _sOperator = _sOperator == "in" ? "eq" : "ne"
                                                   }
                                                   break;
                                               case "date":
                                                   switch (GetDateOperandType(_sOperator)) {
                                                   case OperandTypeDateTime:
                                                       _oValue =
                                                           !IsNull(_oValue) && _oValue.length > 0
                                                           ? ParseUtcDate(_oValue)
                                                           : null;
                                                       break;
                                                   case OperandTypeFiscalPeriodAndYear:
                                                       var oValNodes = oConditionNode.selectNodes("value");
                                                       Mscrm.CrmDebug
                                                           .assert(oValNodes.length == 2,
                                                               "Expect fiscal period and year operators to have two value nodes in condition.");
                                                       var period = oValNodes[0].text,
                                                           year = oValNodes[1].text;
                                                       _oValue = year + (period.length < 2 ? "-0" : "-") + period;
                                                       break;
                                                   case OperandTypeNumber:
                                                   case OperandTypeFiscalPeriod:
                                                   case OperandTypeFiscalYear:
                                                   default:
                                                       break
                                                   }
                                                   break
                                               }
                                           }

                                           function SetFetchXml(oConditionNode) {
                                               _oFetchXmlNode = oConditionNode;
                                               if (!_bInitialized || IsNull(oConditionNode))
                                                   return;
                                               _sField = oConditionNode.getAttribute("attribute");
                                               SetField(_sField);
                                               var sDataType = Container.ClientCache.GetDataType(_sField, EntityName);
                                               _sOperator = oConditionNode.getAttribute("operator");
                                               var oFieldNode = Container.ClientCache.GetField(_sField, EntityName);
                                               if (!IsNull(oFieldNode.getAttribute("nameattr")) &&
                                                   IsNameOperator(_sOperator))
                                                   sDataType = "string";
                                               if (IsValueBoundOperator(_sOperator))
                                                   ConstructOperatorAndValues(sDataType, oConditionNode);
                                               else
                                                   _oValue = null;
                                               SetOperator(_sOperator);
                                               SetValue(IsNull(_oValue) || _oValue.length == 0 ? null : _oValue);
                                               HideInSimple = oConditionNode.getAttribute("uihidden") == "1";
                                               ShowIfDetailedOrNotHidden(element, !_bHideInSimple, Container.Mode);
                                               FinishLoading(oConditionNode)
                                           }

                                           function FieldChanged() {
                                               var oFldSel = _oFldLst.GetFieldList(),
                                                   oCurrField = oFldSel.options[oFldSel.selectedIndex];
                                               _sField = _oFldLst.Value;
                                               var oOperatorList = _oOpLst;
                                               oOperatorList.style.display = "inline";
                                               oOperatorList.Field = oCurrField;
                                               if (oFldSel.selectedIndex != -1) {
                                                   _oValCtrl.RenderControl(oCurrField, _sOperator);
                                                   _oValCtrl.Value = event.oArgs.bRaisedByCode ? _oValue : null
                                               }
                                               ShowOrHideValueCtrl();
                                               GetOuterDiv()
                                                   .className =
                                                   Container.Mode == Container.ModesEnum.Simple
                                                   ? "ms-crm-AdvFind-FilterSimpleField"
                                                   : "ms-crm-AdvFind-FilterField";
                                               _oMnuSpn.style.visibility = "visible";
                                               GetMenuImg().style.visibility = "visible";
                                               Defined = true
                                           }

                                           function GetDateOperandType(sOp) {
                                               switch (sOp) {
                                               case "last-x-hours":
                                               case "next-x-hours":
                                               case "last-x-days":
                                               case "next-x-days":
                                               case "last-x-weeks":
                                               case "next-x-weeks":
                                               case "last-x-months":
                                               case "next-x-months":
                                               case "last-x-years":
                                               case "next-x-years":
                                               case "olderthan-x-months":
                                               case "last-x-fiscal-years":
                                               case "next-x-fiscal-years":
                                               case "last-x-fiscal-periods":
                                               case "next-x-fiscal-periods":
                                                   return OperandTypeNumber;
                                               case "in-fiscal-period":
                                                   return OperandTypeFiscalPeriod;
                                               case "in-fiscal-year":
                                                   return OperandTypeFiscalYear;
                                               case "in-fiscal-period-and-year":
                                               case "in-or-before-fiscal-period-and-year":
                                               case "in-or-after-fiscal-period-and-year":
                                                   return OperandTypeFiscalPeriodAndYear;
                                               default:
                                                   return OperandTypeDateTime
                                               }
                                           }

                                           function OperatorChanged() {
                                               var s = event.srcElement.Value,
                                                   oField = _oFldLst.GetFieldList().options[_oFldLst.GetFieldList()
                                                       .selectedIndex],
                                                   sDataType = Container.ClientCache.AbstractDataType(oField);
                                               if (sDataType == "date") {
                                                   if (GetDateOperandType(s) != GetDateOperandType(_sOperator)) {
                                                       _oValCtrl.Value = null;
                                                       _oValCtrl.RenderControl(oField, s)
                                                   }
                                               } else if (!IsNull(oField["nameattr"]))
                                                   if (IsNameOperator(s) != IsNameOperator(_sOperator)) {
                                                       _oValCtrl.Value = null;
                                                       _oValCtrl.RenderControl(oField, s)
                                                   }
                                               _sOperator = s;
                                               ShowOrHideValueCtrl()
                                           }

                                           function ShowOrHideValueCtrl() {
                                               if (!IsNull(_sOperator))
                                                   _oValCtrl.style
                                                       .display = IsValueBoundOperator(_sOperator) ? "inline" : "none"
                                           }

                                           function DeleteClauseKey() {
                                               (event.keyCode == KEY_SPACE || event.keyCode == KEY_ENTER) &&
                                                   DeleteClause()
                                           }

                                           function ShowErrInfo() {
                                               (event.type == "click" ||
                                                       event.keyCode == KEY_SPACE ||
                                                       event.keyCode == KEY_ENTER) &&
                                                   alert(event.srcElement.title)
                                           }

                                           function valChangeHandler() {
                                               _oValCtrl.detachEvent("onchange", valChangeHandler);
                                               element.all.spnWarnIco.removeNode(true)
                                           }

                                           function BuildLoadableCondition(oCondition, sEntity, oClientCache) {
                                               var sField = oCondition.getAttribute("attribute"),
                                                   oFieldInfo = oClientCache.GetField(sField, sEntity);
                                               if (oFieldInfo == null)
                                                   return {
                                                       ErrorType: "ERROR",
                                                       Message: formatString(LOCID_AF_FIELDDOESNOTEXIST, sField)
                                                   };
                                               var sFieldName = oFieldInfo.getAttribute("value");
                                               oCondition.setAttribute("attribute", sFieldName);
                                               var sOp = oCondition.getAttribute("operator");
                                               if (!IsValueBoundOperator(sOp))
                                                   return null;
                                               var oValues = oCondition.selectNodes("value");
                                               if (IsNull(oValues) || oValues.length == 0)
                                                   oValues = null;
                                               var vValue,
                                                   sValue,
                                                   i,
                                                   bErrors = false,
                                                   sMsg,
                                                   sMsgType = "",
                                                   re,
                                                   sDataType;
                                               if (sFieldName == sField)
                                                   sDataType = oClientCache.GetDataType(sField, sEntity);
                                               else
                                                   sDataType = "string";
                                               if (Container.FetchMode != Container.FetchModesEnum.IgnoreEmpty)
                                                   switch (sDataType.toLowerCase()) {
                                                   case "string":
                                                   case "memo":
                                                       if (oValues) {
                                                           sMsg = LOCID_AF_MULTIPLEVALSNOTALLOWED;
                                                           sMsgType = "WARN";
                                                           bErrors = true
                                                       }
                                                       break;
                                                   case "picklist":
                                                   case "language":
                                                   case "objecttypecode":
                                                       var sPicklistValues = oFieldInfo.getAttribute("optionsXML");
                                                       if (oValues) {
                                                           re = new RegExp;
                                                           for (i = 0; i < oValues.length; i++) {
                                                               sValue = oValues[i].text;
                                                               re
                                                                   .compile("<\\s*option\\s+value\\s*=\\s*([\"|'])" +
                                                                       sValue +
                                                                       "\\1\\s*>",
                                                                       "igm");
                                                               if (sPicklistValues.search(re) == -1) {
                                                                   bErrors = true;
                                                                   oCondition
                                                                       .removeChild(oCondition
                                                                           .selectSingleNode("value[.=" + sValue + "]"))
                                                               }
                                                           }
                                                       } else {
                                                           sValue = oCondition.getAttribute("value");
                                                           re = new
                                                               RegExp("<\\s*option\\s+value\\s*=\\s*([\"|'])" +
                                                                   sValue +
                                                                   "\\1\\s*>",
                                                                   "igm");
                                                           if (sPicklistValues.search(re) == -1) {
                                                               bErrors = true;
                                                               oCondition.setAttribute("value", "")
                                                           }
                                                       }
                                                       if (bErrors &&
                                                           Container.FetchMode == Container.FetchModesEnum.AlertEmpty) {
                                                           sMsg = LOCID_AF_PCKLSTVALDOESNOTEXIST;
                                                           sMsgType = "WARN"
                                                       }
                                                       break;
                                                   case "lookup":
                                                   case "owner":
                                                       if (oValues)
                                                           for (i = 0; i < oValues.length; i++) {
                                                               vValue = oValues[i];
                                                               if (
                                                                   IsNull(vValue.getAttribute("uiname")) ||
                                                                       IsNull(vValue.getAttribute("uitype"))) {
                                                                   bErrors = true;
                                                                   oCondition
                                                                       .removeChild(oCondition
                                                                           .selectSingleNode("value[.='" +
                                                                               vValue.text +
                                                                               "']"))
                                                               }
                                                           }
                                                       else if (
                                                           IsNull(oCondition.getAttribute("uiname")) ||
                                                               IsNull(oCondition.getAttribute("uitype"))) {
                                                           bErrors = true;
                                                           oCondition.setAttribute("value", "")
                                                       }
                                                       if (bErrors &&
                                                           Container.FetchMode == Container.FetchModesEnum.AlertEmpty) {
                                                           sMsg = LOCID_AF_NONLOOKUPVAL;
                                                           sMsgType = "WARN"
                                                       }
                                                       break;
                                                   case "number":
                                                       if (oValues) {
                                                           sMsg = LOCID_AF_MULTIPLEVALSNOTALLOWED;
                                                           sMsgType = "WARN";
                                                           bErrors = true
                                                       } else {
                                                           vValue = oCondition.getAttribute("value");
                                                           if (!IsNull(vValue)) {
                                                               var re = new RegExp("^[-+]?([0-9]*.)?[0-9]+$");
                                                               if (!re.test(vValue)) {
                                                                   sMsg = formatString(LOCID_AF_NONNUMMERICVAL, vValue);
                                                                   if (
                                                                       vValue.length > 0 ||
                                                                           Container.FetchMode ==
                                                                           Container.FetchModesEnum.AlertEmpty) {
                                                                       sMsgType = "WARN";
                                                                       bErrors = true;
                                                                       oCondition.setAttribute("value", "")
                                                                   }
                                                               }
                                                           }
                                                       }
                                                       break;
                                                   case "date":
                                                       if (oValues &&
                                                           GetDateOperandType(sOp) != OperandTypeFiscalPeriodAndYear) {
                                                           sMsg = LOCID_AF_MULTIPLEVALSNOTALLOWED;
                                                           sMsgType = "WARN";
                                                           bErrors = true
                                                       } else {
                                                           vValue = oCondition.getAttribute("value");
                                                           if (!IsNull(vValue)) {
                                                               bErrors = false;
                                                               switch (GetDateOperandType(sOp)) {
                                                               case OperandTypeNumber:
                                                               case OperandTypeFiscalPeriod:
                                                               case OperandTypeFiscalYear:
                                                                   var re = new RegExp("^[+]?([0-9]*.)?[0-9]+$");
                                                                   bErrors = !re.test(vValue);
                                                                   break;
                                                               case OperandTypeFiscalPeriodAndYear:
                                                                   break;
                                                               case OperandTypeDateTime:
                                                               default:
                                                                   var oDate = ParseUtcDate(vValue);
                                                                   bErrors = IsNull(oDate) || isNaN(oDate)
                                                               }
                                                               if (
                                                                   bErrors &&
                                                                   (
                                                                       vValue.length > 0 ||
                                                                           Container.FetchMode ==
                                                                           Container.FetchModesEnum.AlertEmpty)) {
                                                                   sMsg = formatString(LOCID_AF_NONDATEVAL, vValue);
                                                                   sMsgType = "WARN";
                                                                   oCondition.setAttribute("value", "")
                                                               }
                                                           }
                                                       }
                                                       break;
                                                   default:
                                                       break
                                                   }
                                               if (bErrors)
                                                   return { ErrorType: sMsgType, Message: sMsg };
                                               return null
                                           }

                                       </script>
</head>
</html>
</public:component>