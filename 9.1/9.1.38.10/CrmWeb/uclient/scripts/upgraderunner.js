(window.bundleExecutionMarkers=window.bundleExecutionMarkers||{})["scripts/upgraderunner.js?v=1.4.9962-v91onpremise"]={begin:performance.now()},(window.__wpJsonpUci=window.__wpJsonpUci||[]).push([[107],{TUTw:function(e,t,a){"use strict";a.r(t),a.d(t,"runUpgradeHandlers",(function(){return B}));var r=a("Uv1Y"),n=a("SRlt"),i=a("4ciL");var o=a("SJ2k");
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */var s=a("Eh/Y"),c=a("504W"),l=a("vWyY"),f=a("+5Bq"),u=a("jsc8"),d=a("ml6Y");var p=a("84PK"),g=a("8Mff");function m(e,t){return new Promise((a,r)=>{e.dispatch(Object(u.a)(d.a.IsOfflineUpgradeDoneKey)).then(e=>(t.info("getOfflineUpgradeStatus is successfully retrieve data from session state"),Object(c.a)(e)?a(!1):a(!0))).catch(e=>(t.error("getOfflineUpgradeStatus is failed to retrieve key IsOfflineUpgradeDoneKey from session state"),r(e)))})}var O=a("37s6"),y=a("SAYH"),S=a("zmAS");var b,h=a("Nt68"),D=a("TBkx"),v=a("iZ7K"),P=a("Nzmy"),N=a("FZDd"),E=a("SoYb");!function(e){e.IdParameter="Id",e.ActionDataParameter="ActionData",e.SetStateRequestName="SetState",e.QualifyLeadRequestName="QualifyLead",e.LeadIdParameter="LeadId",e.EntityParameter="entity",e.SoapState="State",e.SoapStatus="Status",e.EntityMonikerSetState="EntityMoniker",e.ODataState="statecode",e.ODataStatus="statuscode",e.LogicalName="LogicalName",e.RequestName="RequestName",e.Attributes="Attributes",e.Parameters="Parameters",e.OfflineData="OfflineData",e.ODataType="@odata.type",e.ODataBind="@odata.bind",e.ODataEntityPrefix="Microsoft.Dynamics.CRM.",e.CustomerIdParameterName="customerid",e.MethodPost="POST",e.MethodPatch="PATCH"}(b||(b={}));var U=a("TRNQ"),I=a("2LZB"),C=a("thzq"),K=a("Q7Xa");function j(e,t){const a=(new DOMParser).parseFromString(e,"text/xml"),n=a.getElementsByTagName(b.RequestName)[0].textContent;return M(a.getElementsByTagName(b.Parameters)[0].childNodes,t,!1).then(e=>{if(n===b.SetStateRequestName)return function(e,t){const a=e[b.EntityMonikerSetState],n=a[b.ODataType].split(".").pop(),i=a[n+"id"];return F(n,t).then(t=>{const a={};a[b.ODataState]=e[b.SoapState],-1!==e[b.SoapStatus]&&(a[b.ODataStatus]=e[b.SoapStatus]);return{urlParameters:String.format("{0}({1})",t,i),additionalHeaders:{"If-match":"*","MSCRM.SuppressDuplicateDetection":"true"},body:JSON.stringify(a),method:b.MethodPatch}}).catch(e=>{const t=e.hasOwnProperty("_message")?e:new r.a(e.get_Message());throw P.c.error("UPGRADE OFFLINE: UpgradeUpsyncNonCudCommands: upgradeNonCUDUpsyncRequests:getRequestForSetState: Failed with error: "+t.message),e})}(e,t).then(e=>JSON.stringify(e));const a={Accept:"application/json",Prefer:'odata.include-annotations="*"'};return e[b.OfflineData]&&(a[b.OfflineData]=JSON.stringify(e[b.OfflineData]),delete e[b.OfflineData]),JSON.stringify({urlParameters:w(n,e),additionalHeaders:a,body:JSON.stringify(e),method:b.MethodPost})}).catch(e=>{const t=e.hasOwnProperty("_message")?e:new r.a(e.get_Message());throw P.c.error("UPGRADE OFFLINE: UpgradeUpsyncNonCudCommands: upgradeNonCUDUpsyncRequests:convertSoaptoODataSerializedRequest: Failed with error: "+t.message),e})}function w(e,t){return e===b.QualifyLeadRequestName?(t[b.EntityParameter]=t[b.LeadIdParameter],delete t[b.LeadIdParameter],String.format("leads({0})/{1}{2}",t[b.EntityParameter][b.LeadIdParameter.toLowerCase()],b.ODataEntityPrefix,e)):e}function M(e,t,a){const r=[];return Array.prototype.forEach.call(e,e=>{const n=e.getElementsByTagName("key")[0].textContent,i=e.getElementsByTagName("value")[0],o=i.getAttribute("i:type"),s=o?o.split(":").pop():null;r.push(function(e,t,a,r,n){let i=null;switch(a){case"guid":i=y.a.externalGuid(new y.a(t.textContent));break;case"boolean":i=Object(E.a)(t.textContent);break;case"OptionSetValue":i=Object(E.b)(t.getElementsByTagName("Value")[0].textContent);break;case"Money":i=Object(E.b)(t.textContent);break;case"EntityReference":const a=t.getElementsByTagName(b.LogicalName)[0].textContent,o=t.getElementsByTagName(b.IdParameter)[0].textContent;return function(e,t,a,r,n){if(n)return F(t,r).then(r=>({[e+=e===b.CustomerIdParameterName?"_"+t+b.ODataBind:b.ODataBind]:String.format("{0}/({1})",r,a)}),e=>(P.c.error("UPGRADE OFFLINE: UpgradeUpsyncNonCudCommands: getKeyValueForEntityReference: Entity Metadata could not be retrieved for entity "+a+" with error "+Object(D.e)(e)),Promise.reject(e))).catch(e=>(P.c.error("UPGRADE OFFLINE: UpgradeUpsyncNonCudCommands: getKeyValueForEntityReference: Constructing Entity reference for "+a+" failed with error "+e),Promise.reject(e)));const i={[b.ODataType]:b.ODataEntityPrefix+t};return i[t+"id"]=a,Promise.resolve({[e]:i})}(e,a,o,r,n);case"Entity":return M(t.getElementsByTagName(b.Attributes)[0].childNodes,r,!0).then(t=>({[e]:t})).catch(e=>(P.c.error("UPGRADE OFFLINE: UpgradeUpsyncNonCudCommands: getKeyValueBasedOnType: parseParametersFromSoapNode: failed with error "+Object(D.e)(e)),Promise.reject(e)));case"ArrayOfKeyValueOfstringstring":return M(t.childNodes,r,!0).then(t=>({[e]:t}));case"string":case"dateTime":default:i=t.textContent}return Promise.resolve({[e]:i})}(n,i,s,t,a))}),Promise.all(r).then(e=>Object.assign({},...e))}function F(e,t){return t.dispatch(Object(N.f)(e,!1,[])).then(()=>Object(v.h)(t.getState(),e).EntitySetName).catch(e=>(P.c.error("UPGRADE OFFLINE: UpgradeUpsyncNonCudCommands: getEntitySetName:Failed with error "+Object(D.e)(e)),Promise.reject(e)))}
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */var x=a("GdzE"),R=a("xmKQ"),T=a("KeJu"),A=a("Nb1E");var L=a("CEpr");
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */function q(e){switch(e){case"640X480":return L.a.Res640x480;case"1024X768":return L.a.Res1024x768;case"1600X1200":return L.a.Res1600x1200;case"2048X1536":return L.a.Res2048x1536;case"2592X1936":return L.a.Res2592x1936;case"DeviceDefault":default:return L.a.DeviceDefault}}
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */const _=[{type:"preDbInit.offlinesetting.upgrade",execute(e,t,a){const r=t.TraceManager.getTracer("Offline");return parseInt(e.previousClientVersion,10)>=parseInt("9000000000",10)?(r.info("No need for preDbInitOfflineSettingUpgrader as previous version >= 9.0"),Promise.resolve()):(r.info("Getting offline settings"),m(a,r).then(n=>n?(r.info("preDbInitOfflineSettingUpgrader not run because store is already updated for Upgrade"),Promise.resolve()):function(e,t){const a=[];return a.push(e.DataSource.retrieveDataFromOfflineStore(d.a.OfflineDatabaseKey)),a.push(e.DataSource.retrieveDataFromOfflineStore(d.a.isTrialOrganizationKey)),a.push(e.DataSource.retrieveDataFromOfflineStore(d.a.MaxTimeKey)),a.push(e.DataSource.retrieveSessionState(d.a.OfflineProfileDataKey)),a.push(e.DataSource.retrieveSessionState(d.a.isMobileOfflineOptedInKey)),a.push(e.DataSource.retrieveSessionState(d.a.isMobileOfflineOptedOutKey)),a.push(e.DataSource.retrieveSessionState(d.a.OfflineDisabledInfoKey)),a.push(e.DataSource.retrieveSessionState(d.a.LastSuccessfulSaveOnCrmKey)),a.push(e.DataSource.retrieveSessionState(d.a.SyncErrorFailureMapKey)),Promise.all(a).then(a=>{if(a.length>0){t.info("getOfflineSettingsForUpgrade - retrieved some settings from the local store.");const r={},n=e.DataSource.get_UserContext();r[d.a.isMocaOfflineFCBEnabledKey]=n.get_IsMocaOfflineFeatureEnabled(),r[d.a.norsyncServerConnectionStringKey]=n.get_NorsyncServerConnectionString(),r[d.a.OfflineDatabaseKey]=Object(c.a)(a[0])?"":a[0].toString(),r[d.a.isTrialOrganizationKey]=!Object(c.a)(a[1])&&Object(f.a)(a[1].toString()),r[d.a.MaxTimeKey]=Object(c.a)(a[2])?"":a[2].toString();const i=a[3],o=Object(c.a)(i)||Object(c.a)(i[d.a.OfflineProfileDataKey])?null:i[d.a.OfflineProfileDataKey],s=Object(c.a)(o)?null:JSON.parse(o);Object(c.a)(s)?r[d.a.OfflineProfileDataKey]={}:(s[d.a.OfflineProfileIdKey]=Object(c.a)(s[d.a.OfflineProfileIdKey])?null:p.a.createFromObjectData(s[d.a.OfflineProfileIdKey]).toString(),r[d.a.OfflineProfileDataKey]=s);const l=a[4];r[d.a.isMobileOfflineOptedInKey]=Object(c.a)(l)||Object(c.a)(l[d.a.isMobileOfflineOptedInKey])?g.a.Default:l[d.a.isMobileOfflineOptedInKey];const u=a[5];return r[d.a.isMobileOfflineOptedOutKey]=!Object(c.a)(u)&&!Object(c.a)(u[d.a.isMobileOfflineOptedOutKey])&&Object(f.a)(u[d.a.isMobileOfflineOptedOutKey]),r[d.a.OfflineDisabledInfoKey]=Object(c.a)(a[6])?{}:a[6],r[d.a.LastSuccessfulSaveOnCrmKey]=Object(c.a)(a[7])?{}:a[7],r[d.a.SyncErrorFailureMapKey]=Object(c.a)(a[8])?{}:a[8],Promise.resolve(r)}return t.info("getOfflineSettingsForUpgrade - no settings retrieved from the local store, returning null."),Promise.resolve(null)}).catch(e=>Promise.reject(e))}(t,r).then(t=>{if(t){r.info("Adding offline data into upgrade context.");const n=Object(c.a)(t[d.a.OfflineDatabaseKey])?null:t[d.a.OfflineDatabaseKey];Object(c.a)(n)||a.dispatch(Object(s.b)(n)),e.storeData("offlineSettingInformation",t)}return Promise.resolve()},e=>(r.error("getting offline settings faileed with error."),Promise.reject(e))),e=>(r.error("preDbInitOfflineSettingUpgrader is Failed while Running Upgrade"),Promise.reject(e))))}},{type:"offline.noncud.upgrade",execute(e,t,a){const n=t.TraceManager.getTracer("Offline");return parseInt(e.previousClientVersion,10)>=parseInt("9000000000",10)?(n.info("No need for offlineNonCudUpgrader as previous version >= 9.0"),Promise.resolve()):m(a,n).then(e=>{if(!e){const e=t.DataSource.get_UserContext(),i=Object(O.d)(a.getState());return!e.get_IsMocaOfflineFeatureEnabled()||Object(c.a)(i)||y.a.isNullOrEmpty(y.a.tryParse(i))?(n.info("offlineNonCudUpgrader Handler not run becasue either User is not enabled for offline or invalid database"),Promise.resolve()):t.OfflineProvider.initializeOfflineDataSource(e).nativePromise().then(()=>
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
function(e){const t=new U.a;return t.retrieve(h.a.CommandString,new I.a(null)).nativePromise().then(t=>{P.c.info("UPGRADE OFFLINE: UpgradeUpsyncNonCudCommands: upgradeNonCUDUpsyncRequests: Succeeded retrieving Non-Cud Requests: "+t.rows.length);const a=[];for(let r=0;r<t.rows.length;r++){const n=t.rows.item(r);a.push(j(n[b.ActionDataParameter],e).then(e=>{const t={[b.IdParameter]:n[b.IdParameter],[b.ActionDataParameter]:e};return new K.a(t,C.a.Update,h.a.CommandString)}))}return Promise.all(a)}).then(e=>(P.c.info("UPGRADE OFFLINE: UpgradeUpsyncNonCudCommands: upgradeNonCUDUpsyncRequests: Succeeded in converting Non-Cud Requests to Odata requests"),t.performOperations(e,null,!1).nativePromise())).catch(e=>{const t=e.hasOwnProperty("_message")?e:new r.a(e.get_Message());throw P.c.error("UPGRADE OFFLINE: UpgradeUpsyncNonCudCommands: upgradeNonCUDUpsyncRequests:convertNonCudUpsyncRequests: Failed with error: "+t.message),e})}(a),e=>Promise.reject(r.a.fromLegacyErrorStatus(e)))}return n.info("offlineNonCudUpgrader not run because store is already updated for Upgrade"),Promise.resolve()},e=>(n.error("offlineNonCudUpgrader is failed on while Upgrading."),Promise.reject(e)))}},{type:"offline.playback",execute(e,t,a){const r=t.TraceManager.getTracer("Offline");return parseInt(e.previousClientVersion,10)>=parseInt("9000000000",10)?(r.info("No need for performPlaybackForOfflineActions as previous version >= 9.0"),Promise.resolve()):m(a,r).then(e=>{if(!e){const e=t.DataSource.get_UserContext(),n=Object(O.d)(a.getState());return!e.get_IsMocaOfflineFeatureEnabled()||Object(c.a)(n)||y.a.isNullOrEmpty(y.a.tryParse(n))?(r.info("performPlaybackForOfflineActions Upgrade Handler not run because either User is not enabled for offline or invalid database"),Promise.resolve()):a.dispatch(Object(S.initializeOfflineUpsyncProcessAsyncAction)())}return r.info("performPlaybackForOfflineActions not run because Store is already updated for Upgrade"),Promise.resolve()},e=>(r.error("performPlaybackForOfflineActions is failed While Upgrading"),Promise.reject(e)))}},{type:"preDbInit.personalization.upgrade",execute:(e,t)=>parseInt(e.previousClientVersion,10)>=parseInt("9000000000",10)?new Promise((e,t)=>{e()}):t.DataSource.pullPersonalizations().nativePromise().then(t=>{e.storeData("personalizations",t)})},{type:"preDbInit.devicesetting.upgrade",execute:(e,t,a)=>new Promise((r,n)=>{parseInt(e.previousClientVersion,10)>=parseInt("9000000000",10)?r():a.dispatch(Object(u.a)("deviceSettingInformation")).then(a=>{a?e.storeData("deviceSettingInformation",a):t.TraceManager.getTracer("DeviceIntegration").info("Legacy DeviceSetting Session Empty."),r()},e=>{n(e)})})},{type:"datasource.upgrade",execute:(e,t,a)=>t.DataSource.upgrade().nativePromise().then(t=>{if(e.previousClientVersion===o.a)return a.dispatch({type:"update.entity.set.names.async",execute({dispatch:e,getState:t},a,o){const s=a.DataSource.get_LocalDataSource();if(s)return s.RetrieveMultipleEntityMetadata(null).nativePromise().then(t=>{if(t.length){const a=t.map(e=>e.get_logicalName()),o=25,c=[];let l=0,f=0;for(l=0;l<a.length;l+=o){let e="";const t=a.slice(l,l+o);for(f=0;f<t.length;f++)""!==e&&(e+=" or "),e+=`LogicalName eq '${t[f]}'`;const r={urlParameters:"EntityDefinitions?$select=LogicalName,EntitySetName&$filter="+e,additionalHeaders:{Accept:n.a},method:"GET"};c.push(r)}return e(Object(i.c)(c)).then(e=>{const a=[];return e.forEach(e=>{const t=Object(n.g)(e).then(e=>e.value).catch(r.b);a.push(t)}),Promise.all(a).then(e=>{const a={};e.forEach(e=>{e.forEach(e=>{a[e.LogicalName]=e.EntitySetName})});for(const e of t)e.set_entitySetName(a[e.get_logicalName()]);return s.CreateMultipleEntityMetadata(t).nativePromise().catch(r.b)}).catch(r.b)}).catch(r.b)}}).catch(r.b)}})}).catch(r.b)},{type:"postDbInit.personalization.upgrade",execute(e,t){const a=e.getData("personalizations");return a?t.DataSource.pushPersonalizations(a).nativePromise():Promise.resolve()}},{type:"postDbInit.devicesetting.upgrade",execute(e,t,a){const r=e.getData("deviceSettingInformation"),n={};if(r){const e={featureName:"camera",isEnabled:!r.CameraDiabled,imageRes:q(r.ImageRes),savePhoto:!r.PhotoSaveDisabled},t={featureName:"video",isEnabled:!r.DeviceAccessDisabled},i={featureName:"geolocation",isEnabled:!r.DeviceAccessDisabled};return n.camera=e,n.video=t,n.geolocation=i,a.dispatch(Object(x.a)("deviceSettingInformation",n,!1))}return new Promise((e,t)=>{e()})}},{type:"postDbInit.offlinesetting.upgrade",execute(e,t,a){const r=t.TraceManager.getTracer("Offline");return parseInt(e.previousClientVersion,10)>=parseInt("9000000000",10)?(r.info("No need for preDbInitOfflineSettingUpgrader as previous version >= 9.0"),Promise.resolve()):m(a,r).then(n=>{if(!n){const n=e.getData("offlineSettingInformation");if(n){r.info("Found some legacy offline settings. Pushing data into session state.");const e=[],i={[d.a.norsyncServerConnectionStringKey]:n[d.a.norsyncServerConnectionStringKey].toString(),[d.a.isTrialOrganizationKey]:n[d.a.isTrialOrganizationKey].toString(),[d.a.isMocaOfflineFCBEnabledKey]:n[d.a.isMocaOfflineFCBEnabledKey].toString()},o=Object(f.a)(n[d.a.isMobileOfflineOptedInKey].toString()),s=Object(f.a)(n[d.a.isMobileOfflineOptedOutKey].toString()),c=o&&!s?g.a.Enabled:!o&&s?g.a.Disabled:g.a.Default;return e.push(t.DataSource.saveSessionState(d.a.OfflineProfileDataKey,n[d.a.OfflineProfileDataKey],!1)),e.push(t.DataSource.saveSessionState(d.a.offlineDatabaseInformationKey,i,!1)),e.push(t.DataSource.saveSessionState(d.a.isMobileOfflineOptedInKey,{[d.a.isMobileOfflineOptedInKey]:c.toString()},!1)),e.push(t.DataSource.saveSessionState(d.a.OfflineDatabaseKey,{[d.a.OfflineDatabaseKey]:n[d.a.OfflineDatabaseKey]},!1)),e.push(t.DataSource.saveSessionState(d.a.OfflineDisabledInfoKey,n[d.a.OfflineDisabledInfoKey],!1)),e.push(t.DataSource.saveSessionState(d.a.MaxTimeKey,{[d.a.MaxTimeKey]:n[d.a.MaxTimeKey]},!1)),e.push(t.DataSource.saveSessionState(d.a.LastSuccessfulSaveOnCrmKey,n[d.a.LastSuccessfulSaveOnCrmKey],!1)),e.push(t.DataSource.saveSessionState(d.a.SyncErrorFailureMapKey,n[d.a.SyncErrorFailureMapKey],!1)),e.push(t.DataSource.saveSessionState(d.a.IsOfflineUpgradeDoneKey,{[d.a.IsOfflineUpgradeDoneKey]:!0},!1)),Promise.all(e).then(()=>(r.info("Saved offline settings into session state successfully."),a.dispatch(Object(l.a)())),e=>(r.error("Issue while stroing offline settings data into session state."),Promise.reject(e)))}return r.info("Found no legacy offline settings while upgrade."),Promise.resolve()}return r.info("postDbInitOfflineSettingUpgrader not run because Store is already updated for Upgrade"),Promise.resolve()},e=>(r.error("postDbInitOfflineSettingUpgrader is failed while running Upgrade."),Promise.reject(e)))}},{type:"appmodule.upgrade",execute(e,t,a){if("8200000000"!==e.previousClientVersion)return Promise.resolve();const r=String.format("?$select=appmoduleid&$filter=uniquename eq '{0}' and clienttype eq {1}","mobilecustom",4);return new Promise((e,n)=>{a.dispatch(Object(A.e)("appmodule",r)).then(t=>{if(t.value&&t.value.length){const r=t.value[0].appmoduleid,n={};n.appId=r,a.dispatch(Object(x.a)("LastAccessedApp",n,!1)),a.dispatch(Object(R.b)(r)),a.dispatch(Object(T.d)(new y.a(r))).then(()=>{e()})}else e()},a=>{t.EventManager.ReportComponentFailure("AppModuleUpgrader",a),e()})})}}];
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */function B(e,t,a,r){const n=t.TraceManager.getTracer("UpgradeHandler");return _.reduce((e,n,i)=>e.then(()=>n.execute(r,t,a)),Promise.resolve()).then(()=>(n.info(`Upgrade is successful from version '${r.previousClientVersion}' to '${r.currentClientVersion}'`),r))}}}]),window.bundleExecutionMarkers["scripts/upgraderunner.js?v=1.4.9962-v91onpremise"].end=window.performance.now(),window.reportBundleExecutionTimes&&window.reportBundleExecutionTimes();