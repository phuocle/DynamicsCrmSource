<public:component lightweight="true">
<public:attach event="ondocumentready"	onevent="onDocumentReady()"/>
<public:attach event="onkeydown"		onevent="handleKeyDown()"/>
<public:property name="SelectedValue"	get="getSelectedValue"		put="putSelectedValue"/>
<public:property name="NextValue"		get="getNextValue"		put="putNextValue"/>
<public:property name="Count"		get="getCount"/>
<public:property name="DataXml"		get="getDataXml"			put="putDataXml"/>
<public:property name="Disabled"		get="getDisabled"			put="setDisabled"/>
<public:property name="IsRTL"		get="getIsRTL"			put="putIsRTL"/>
<public:property name="CurrentValueFormat"		get="getCurrentValueFormat"			put="putCurrentValueFormat"/>
<public:method name="CheckFunction"	internalname="checkFunction"/>
<public:method name="MoveValueUp"	internalname="moveValueUp"/>
<public:method name="MoveValueDown"	internalname="moveValueDown"/>
<public:method name="EditValue"	internalname="editValue"/>
<public:method name="AddValue"	internalname="addValue"/>
<public:method name="RemoveValue"	internalname="removeValue"/>
<public:method name="SortValues"	internalname="sortValues"/>
<public:method name="RunCommand"	internalname="runCommand"/>
<public:method name="HandleItemSelected"	internalname="handleItemSelected"/>
<public:event name="onchange" id="onChangeEvent"/>
<script language="JavaScript"></script><script type="text/javascript">

var HIGHLIGHT_COLOR = "#c4ddff",
    DIM_COLOR = "#ffffff",
    _oValues,
    _currentValueFormat,
    _isRTL,
    _sMode,
    CommandAdd = "add",
    CommandEdit = "edit",
    CommandRemove = "remove",
    CommandMoveUP = "moveup",
    CommandMoveDown = "movedown",
    CommandSortAsc = "sortasc",
    CommandSortDes = "sortdes",
    TextBoxIntegerId = LOCID_VALUE_BOX_ID + LOCID_INTEGER_VALUES,
    TextBoxFloatId = LOCID_VALUE_BOX_ID + LOCID_DECIMAL_VALUES,
    TextBoxTextId = LOCID_VALUE_BOX_ID + LOCID_TEXT_VALUES;
function ValuesObj()
{
    this.iDefaultValue = null;
    this.iNextValue = 0;
    this.aValues = [];
    this.iSelectedValue = null;
    this.SetSelectedValue = ValuesObj_setSelectedValue;
    this.SetNextValue = ValuesObj_setNextValue;
    this.FindValue = ValuesObj_findValue;
    this.GetValue = ValuesObj_getValue;
    this.AddValue = ValuesObj_addValue;
    this.RemoveValue = ValuesObj_removeValue;
    this.MoveValueUp = ValuesObj_moveValueUp;
    this.MoveValueDown = ValuesObj_moveValueDown;
    this.SortValues = ValuesObj_sortValues;
    this.Serialize = ValuesObj_serialize;
    this.Deserialize = ValuesObj_deserialize;
    this.EmptyList = ValuesObj_emptyList;
    function ValuesObj_setSelectedValue(iValue)
    {
        var oValue = this.GetValue(iValue);
        if(oValue == null)
            throw new Error("Invalid argument");
        this.iSelectedValue = iValue
    }
    function ValuesObj_setNextValue(iValue)
    {
        for(var aiClnVals = [],
            iLen = this.aValues.length,
            iVal,
            bCf = false,
            i = 0; i < iLen; i++)
        {
            iVal = this.aValues[i].iValue;
            if(iVal >= iValue)
            {
                aiClnVals[i] = iVal;
                bCf = bCf || iVal == iValue
            }
        }
        if(bCf)
        {
            aiClnVals.sort(function(v1,v2)
            {
                return v1 > v2 ? 1 : v1 < v2 ? -1 : 0
            });
            iLen = aiClnVals.length;
            for(var i = 0; i < iLen; i++)
                if(iValue == aiClnVals[i])
                    ++iValue;
                else
                    if(iValue < aiClnVals[i])
                        break
        }
        this.iNextValue = iValue
    }
    function ValuesObj_emptyList()
    {
        for(var length = this.aValues.length,
            i = 0; i < length; i++)
            this.aValues.splice(0,1);
        this.iSelectedValue = null;
        this.SetNextValue(0)
    }
    function ValuesObj_findValue(iValue)
    {
        for(var i = 0; i < this.aValues.length; i++)
            if(this.aValues[i].iValue == iValue)
                return i;
        return -1
    }
    function ValuesObj_getValue(iValue)
    {
        var i = this.FindValue(iValue);
        return i >= 0 ? this.aValues[i] : null
    }
    function ValuesObj_addValue(sLabel,position)
    {
        var insertPos = this.aValues.length;
        if(!IsNull(position) && typeof position == "number")
            insertPos = position;
        for(var newValue = new ValuesObj_valueObj(this.iNextValue,sLabel,true),
            i = this.aValues.length; i > insertPos; i--)
            this.aValues[i] = this.aValues[i - 1];
        this.aValues[insertPos] = newValue;
        this.SetNextValue(this.iNextValue + 1);
        return insertPos
    }
    function ValuesObj_moveValueUp(iValue)
    {
        var bResult = false,
            i = this.FindValue(iValue),
            j;
        if(i < 0)
            throw new Error("Invalid argument");
        j = i - 1;
        if(j >= 0)
        {
            var oPrevValue = this.aValues[j];
            this.aValues[j] = this.aValues[i];
            this.aValues[i] = oPrevValue;
            bResult = true
        }
        return bResult
    }
    function ValuesObj_moveValueDown(iValue)
    {
        var bResult = false,
            i = this.FindValue(iValue);
        if(i < 0)
            throw new Error("Invalid argument");
        j = i + 1;
        if(j < this.aValues.length)
        {
            var oNextValue = this.aValues[j];
            this.aValues[j] = this.aValues[i];
            this.aValues[i] = oNextValue;
            bResult = true
        }
        return bResult
    }
    function ValuesObj_removeValue(iValue)
    {
        var i = this.FindValue(iValue);
        if(i < 0)
            throw new Error("Invalid argument");
        this.aValues.splice(i,1);
        if(this.iSelectedValue == iValue)
            this.iSelectedValue = null
    }
    function ValuesObj_sortValues(bAscend)
    {
        if(bAscend)
            this.aValues.sort(function(o1,o2)
            {
                return o1.sLabel.localeCompare(o2.sLabel)
            });
        else
            this.aValues.sort(function(o1,o2)
            {
                return o2.sLabel.localeCompare(o1.sLabel)
            })
    }
    function ValuesObj_serialize()
    {
        var oXmlDoc = XUI.Xml.CreateDocument(),
            oValues = oXmlDoc.createElement("values");
        oXmlDoc.documentElement = oValues;
        oValues.setAttribute("next",this.iNextValue);
        for(var i = 0; i < this.aValues.length; i++)
        {
            var oValue = oXmlDoc.createElement("value");
            oValue.setAttribute("value",this.aValues[i].iValue);
            oValue.setAttribute("label",this.aValues[i].sLabel);
            oValues.appendChild(oValue)
        }
        return oValues.xml
    }
    function ValuesObj_deserialize(oDataXml)
    {
        var oValuesNode = oDataXml.documentElement,
            iValueNode,
            oValueNode,
            oValueNodeList,
            oValue;
        this.aValues = [];
        oValueNodeList = oValuesNode.selectNodes("value");
        for(iValueNode = 0; iValueNode < oValueNodeList.length; iValueNode++)
        {
            oValueNode = oValueNodeList.item(iValueNode);
            var newElement = new ValuesObj_valueObj(oValueNode.attributes.getNamedItem("value").value,oValueNode.attributes.getNamedItem("label").value,false);
            this.aValues[this.aValues.length] = newElement
        }
        this.SetNextValue(Number(oValuesNode.attributes.getNamedItem("next").value))
    }
    function ValuesObj_valueObj(iValue,sLabel,bNew)
    {
        if(LOCID_TEXT_VALUES == _currentValueFormat)
            this.iValue = iValue.toString();
        else
            if(LOCID_INTEGER_VALUES == _currentValueFormat || LOCID_DECIMAL_VALUES == _currentValueFormat)
                this.iValue = Number(iValue);
        this.sLabel = sLabel;
        this.bNew = bNew
    }
}
function onDocumentReady()
{
    loadMessages(getObjByName("xmlMsg").XMLDocument);
    init(getObjByName("xmlData").XMLDocument)
}
function init(oDataXml)
{
    _oValues = new ValuesObj;
    _oValues.Deserialize(oDataXml);
    updateUI();
    var valueElement = element.document.all[element.id + "_" + TextBoxIntegerId];
    !IsNull(valueElement) && 
        valueElement.attachEvent("onchange",handleItemChange);
    valueElement = element.document.all[element.id + "_" + TextBoxFloatId];
    !IsNull(valueElement) && 
        valueElement.attachEvent("onchange",handleItemChange);
    valueElement = element.document.all[element.id + "_" + TextBoxTextId];
    !IsNull(valueElement) && 
        valueElement.attachEvent("onchange",handleItemChange);
    var valueLabel = element.document.all[element.id + "_txtItemLb"];
    !IsNull(valueLabel) && 
        valueLabel.attachEvent("onchange",handleItemChange);
    InitCommandEvent()
}
var _oMessages = {deleteValue:""};
function loadMessages(oMsgXml)
{
    _oMessages.deleteValue = oMsgXml.documentElement.selectSingleNode("deletevalue").text
}
function updateUI()
{
    buildValueList()
}
function buildValueList()
{
    for(var sHtml = '<table cellpadding="2" cellspacing="0" width="100%">',
        iIndex,
        selectHtml = "",
        i = 0; i < _oValues.aValues.length; i++)
    {
        var oValue = _oValues.aValues[i];
        sHtml += '<tr id="' + this.id + "_val" + i + '" value="' + CrmEncodeDecode.CrmHtmlAttributeEncode(oValue.iValue) + '" selected="0" onclick="' + this.id + ".HandleItemSelected(" + i + ');"><td nowrap class="hand">' + CrmEncodeDecode.CrmHtmlEncode(oValue.sLabel) + "</td></tr>";
        if(_sMode != "add" && _oValues.iSelectedValue == oValue.iValue)
        {
            iIndex = i;
            _oValues.iSelectedValue = oValue.iValue
        }
    }
    sHtml += "</table>";
    if(_sMode == "add")
    {
        _sMode = null;
        var j = _oValues.aValues.length - 1;
        _oValues.iSelectedValue = _oValues.aValues[j].iValue
    }
    getObjByName("divValueList").innerHTML = sHtml;
    highliteValue(iIndex);
    RefreshItemProperties()
}
function handleItemSelected(index)
{
    if(IsNull(index))
        return;
    if(_oValues.aValues.length > index)
    {
        this.SelectedValue = _oValues.aValues[index].iValue;
        RefreshItemProperties()
    }
}
function RefreshItemProperties()
{
    var el = element.document.getElementById(element.id + "_" + LOCID_VALUE_BOX_ID + _currentValueFormat);
    if(IsNull(el))
        return;
    var oValue = _oValues.GetValue(this.SelectedValue);
    if(IsNull(oValue))
    {
        ResetItemProperties();
        return
    }
    switch(_currentValueFormat)
    {
        case LOCID_INTEGER_VALUES:
        case LOCID_DECIMAL_VALUES:
            el.DataValue = Number(oValue.iValue);
            break;
        case LOCID_TEXT_VALUES:
            $find(el.id).set_dataValue(oValue.iValue);
            break
    }
    el.disabled = this.disabled;
    el = element.document.getElementById(element.id + "_txtItemLb");
    $find(el.id).set_dataValue(oValue.sLabel);
    el.disabled = this.disabled
}
function ResetItemProperties()
{
    var el = element.document.getElementById(element.id + "_" + LOCID_VALUE_BOX_ID + _currentValueFormat);
    if(IsNull(el))
        return;
    el.DataValue = null;
    el.disabled = true;
    el = element.document.getElementById(element.id + "_txtItemLb");
    el.DataValue = "";
    el.disabled = true
}
function highliteValue(iIndex)
{
    setValueBgColor(iIndex,HIGHLIGHT_COLOR)
}
function dimValue(iIndex)
{
    setValueBgColor(iIndex,DIM_COLOR)
}
function setValueBgColor(iIndex,sBgColor)
{
    if(iIndex != null)
    {
        var obj = getObjByName("val" + iIndex);
        obj.style.backgroundColor = sBgColor;
        obj.selected = sBgColor == DIM_COLOR ? 0 : 1
    }
}
function getObjByName(sName)
{
    return this.all.item(this.id + "_" + sName)
}
function getCurrentValueFormat()
{
    return _currentValueFormat
}
function putCurrentValueFormat(valueFormat)
{
    if(valueFormat == LOCID_RESPONSE_TYPE_DATEONLY || valueFormat == LOCID_RESPONSE_TYPE_DATETIME || valueFormat == LOCID_RESPONSE_TYPE_LOOKUP)
        _currentValueFormat = LOCID_RESPONSE_TYPE_INTEGER;
    else
        _currentValueFormat = valueFormat;
    showSelectedTypeTextbox();
    _oValues.EmptyList();
    updateUI()
}
function getIsRTL()
{
    return _isRTL
}
function putIsRTL(value)
{
    _isRTL = value
}
function showSelectedTypeTextbox()
{
    var integerBoxRow = element.document.getElementById(this.id + "_rowTxtItemVal"),
        stringBoxRow = element.document.getElementById(this.id + "_rowTxtItemValText"),
        floatBoxRow = element.document.getElementById(this.id + "_rowTxtItemValFloat");
    integerBoxRow.style.display = _currentValueFormat == LOCID_INTEGER_VALUES ? "inline" : "none";
    stringBoxRow.style.display = _currentValueFormat == LOCID_TEXT_VALUES ? "inline" : "none";
    floatBoxRow.style.display = _currentValueFormat == LOCID_DECIMAL_VALUES ? "inline" : "none"
}
function getDataXml()
{
    return _oValues.Serialize()
}
function putDataXml(sDataXml)
{
    var oXmlDoc = XUI.Xml.LoadXml(sDataXml);
    init(oXmlDoc)
}
function getDisabled()
{
    return this.disabled
}
function setDisabled(bValue)
{
    this.disabled = bValue;
    disableFunction("move",bValue);
    disableFunction("edit",bValue);
    disableFunction("addremove",bValue);
    disableFunction("sort",bValue)
}
function getSelectedValue()
{
    return _oValues.iSelectedValue
}
function putSelectedValue(val)
{
    var iValue;
    iValue = val;
    if(!getDisabled())
    {
        var iPrevSelectedValue = _oValues.iSelectedValue;
        _oValues.SetSelectedValue(iValue);
        for(var iPrevIndex,
            iSelectedIndex,
            i = 0; i < _oValues.aValues.length; i++)
            if(iPrevSelectedValue == _oValues.aValues[i].iValue)
                iPrevIndex = i;
            else
                if(iValue == _oValues.aValues[i].iValue)
                    iSelectedIndex = i;
        if(!IsNull(iSelectedIndex))
            _oValues.iSelectedValue = iValue;
        else
            _oValues.iSelectedValue = null;
        dimValue(iPrevIndex);
        highliteValue(iSelectedIndex)
    }
}
function getNextValue()
{
    if(!checkFunction("addremove"))
        throw new Error("Function not available");
    else
        if(getDisabled())
            return;
    return _oValues.iNextValue
}
function putNextValue(iValue)
{
    if(!checkFunction("addremove"))
        throw new Error("Function not available");
    else
        if(getDisabled())
            return;
    _oValues.SetNextValue(iValue)
}
function getCount()
{
    return _oValues.aValues.length - 1
}
function disableFunction(sFunction,bDisable)
{
    switch(sFunction.toLowerCase())
    {
        case "move":
            DisableItem(getObjByName("btnMoveValueUp"),bDisable);
            DisableItem(getObjByName("btnMoveValueDown"),bDisable);
            break;
        case "edit":
            DisableItem(getObjByName("btnEditValue"),bDisable);
            break;
        case "addremove":
            DisableItem(getObjByName("btnAddValue"),bDisable);
            DisableItem(getObjByName("btnRemoveValue"),bDisable);
            break;
        case "sort":
            DisableItem(getObjByName("btnSortAsc"),bDisable);
            DisableItem(getObjByName("btnSortDesc"),bDisable);
            break;
        default:
            return
    }
}
function DisableItem(o,bDisable)
{
    o.disabled = bDisable;
    if(!IsNull(o.firstChild) && o.firstChild.tagName == "IMG")
        o.firstChild.style.filter = bDisable ? "progid:DXImageTransform.Microsoft.Alpha(opacity=50)" : _isRTL != null && _isRTL ? "FlipH()" : ""
}
function checkFunction(sFunction)
{
    switch(sFunction.toLowerCase())
    {
        case "move":
            return getObjByName("btnMoveValueUp") != null && getObjByName("btnMoveValueDown") != null;
        case "edit":
            return getObjByName("btnEditValue") != null;
        case "addremove":
            return getObjByName("btnAddValue") != null && getObjByName("btnRemoveValue") != null;
        case "setdefault":
            return getObjByName("selDefaultValue") != null;
        case "sort":
            return getObjByName("btnSortAsc") != null && getObjByName("btnSortDesc") != null;
        default:
            return false
    }
}
function moveValueUp()
{
    var iValue;
    if(!checkFunction("move"))
        throw new Error("Function not available");
    else
        if(getDisabled())
            return;
    iValue = _oValues.iSelectedValue;
    _oValues.MoveValueUp(iValue) && 
        updateUI()
}
function moveValueDown()
{
    var iValue;
    if(!checkFunction("move"))
        throw new Error("Function not available");
    else
        if(getDisabled())
            return;
    iValue = _oValues.iSelectedValue;
    _oValues.MoveValueDown(iValue) && 
        updateUI()
}
function editValue()
{
    var iValue,
        sLabel,
        oValue;
    if(!checkFunction("edit"))
        throw new Error("Function not available");
    else
        if(getDisabled())
            return;
    if(arguments.length == 0)
    {
        iValue = _oValues.iSelectedValue;
        sLabel = null
    }
    else
        if(arguments.length == 1 && typeof arguments[0] == "number")
        {
            iValue = arguments[0];
            sLabel = null
        }
        else
            if(arguments.length == 1 && typeof arguments[0] == "string")
            {
                iValue = _oValues.iSelectedValue;
                sLabel = arguments[0]
            }
            else
                if(arguments.length == 2 && (typeof arguments[0] == "number" || typeof arguments[0] == "string") && typeof arguments[1] == "string")
                {
                    iValue = arguments[0];
                    sLabel = arguments[1]
                }
                else
                    throw new Error("Invalid argument");
    oValue = _oValues.GetValue(iValue);
    if(oValue == null)
        throw new Error("Invalid argument");
    if(sLabel == null)
    {
        var oArgs,
            oResult;
        oArgs = {};
        oArgs.iValue = oValue.iValue;
        oArgs.sLabel = oValue.sLabel;
        oResult = openStdDlg(Mscrm.CrmUri.create("/_controls/listEdit/listValue.aspx?mode=edit"),oArgs,300,210);
        if(oResult == null)
            return;
        sLabel = oResult.sLabel;
        iValue = oResult.iValue
    }
    oValue.sLabel = sLabel;
    oValue.iValue = iValue;
    updateUI()
}
function addValue()
{
    var sLabel,
        iValue;
    _sMode = "add";
    if(!checkFunction("addremove"))
        throw new Error("Function not available");
    else
        if(getDisabled())
            return;
    if(arguments.length == 0)
        sLabel = null;
    else
        if(arguments.length == 1 && typeof arguments[0] == "string")
            sLabel = arguments[0];
        else
            throw new Error("Invalid argument");
    if(sLabel == null)
    {
        var oArgs = {};
        oArgs.iValue = _oValues.iNextValue;
        oArgs.sLabel = "";
        oResult = openStdDlg(Mscrm.CrmUri.create("/_controls/listEdit/listValue.aspx?mode=add"),oArgs,300,210);
        if(oResult == null)
            return;
        sLabel = oResult.sLabel;
        iValue = oResult.iValue
    }
    var position = null;
    if(!IsNull(_oValues.iSelectedValue))
        position = _oValues.FindValue(_oValues.iSelectedValue) + 1;
    var retValue = _oValues.AddValue(sLabel,position);
    if(!IsNull(iValue) && !IsNull(retValue))
        _oValues.aValues[retValue].iValue = iValue;
    updateUI();
    if(!IsNull(retValue))
        if(SelectedValue != _oValues.aValues[retValue].iValue)
            SelectedValue = _oValues.aValues[retValue].iValue
}
function removeValue(bShowWarning,iValue)
{
    if(!checkFunction("addremove"))
        throw new Error("Function not available");
    else
        if(getDisabled())
            return;
    if(arguments.length > 2 || arguments.length >= 1 && typeof arguments[0] != "boolean")
        throw new Error("Invalid argument");
    if(typeof bShowWarning == "undefined")
        bShowWarning = false;
    if(typeof iValue == "undefined")
        iValue = _oValues.iSelectedValue;
    var rowIndex = _oValues.FindValue(iValue),
        valueObj = _oValues.aValues[rowIndex];
    bShowWarning = bShowWarning && _oMessages.deleteValue.length > 0;
    if(valueObj != null && valueObj.bNew)
        bShowWarning = false;
    if(!bShowWarning || confirm(_oMessages.deleteValue))
    {
        _oValues.RemoveValue(iValue);
        updateUI()
    }
}
function sortValues(bAscend)
{
    if(!checkFunction("sort"))
        throw new Error("Function not available");
    else
        if(getDisabled())
            return;
    _oValues.SortValues(bAscend);
    updateUI()
}
function handleKeyDown()
{
    var oValueList = getObjByName("divValueList"),
        el = event.srcElement,
        rowIndex,
        oRow;
    while(!IsNull(el) && (el.id != oValueList.id && el.id != "CommandBar"))
        el = el.parentElement;
    if(IsNull(el))
        return;
    switch(event.keyCode)
    {
        case KEY_DOWN:
            event.returnValue = false;
            var aValueRows = oValueList.firstChild.rows,
                iLength = aValueRows.length;
            if(iLength > 0)
                if(IsNull(SelectedValue))
                {
                    rowIndex = GetRowIndex(aValueRows[0]);
                    SelectedValue = _oValues.aValues[rowIndex].iValue
                }
                else
                {
                    rowIndex = _oValues.FindValue(SelectedValue);
                    oRow = getObjByName("val" + rowIndex);
                    if(IsNull(oRow))
                        break;
                    rowIndex = oRow.rowIndex;
                    if(rowIndex >= iLength - 1)
                    {
                        oRow = aValueRows[0];
                        rowIndex = GetRowIndex(oRow);
                        SelectedValue = _oValues.aValues[rowIndex].iValue;
                        rowIndex >= 0 && 
                            oRow.scrollIntoView(true)
                    }
                    else
                    {
                        rowIndex = rowIndex + 1;
                        oRow = aValueRows[rowIndex];
                        rowIndex = GetRowIndex(oRow);
                        if(rowIndex >= 0)
                        {
                            SelectedValue = _oValues.aValues[rowIndex].iValue;
                            ScrollVerticalList(oValueList,oRow,oRow.rowIndex,iLength,false)
                        }
                    }
                }
            RefreshItemProperties();
            break;
        case KEY_UP:
            event.returnValue = false;
            var aValueRows = oValueList.firstChild.rows,
                iLength = aValueRows.length;
            if(iLength > 0)
                if(IsNull(SelectedValue))
                {
                    rowIndex = GetRowIndex(aValueRows[0]);
                    SelectedValue = _oValues.aValues[rowIndex].iValue
                }
                else
                {
                    rowIndex = _oValues.FindValue(SelectedValue);
                    oRow = getObjByName("val" + rowIndex);
                    if(IsNull(oRow))
                        break;
                    rowIndex = oRow.rowIndex;
                    if(rowIndex == 0)
                    {
                        oRow = aValueRows[iLength - 1];
                        rowIndex = GetRowIndex(oRow);
                        SelectedValue = _oValues.aValues[rowIndex].iValue;
                        rowIndex >= 0 && 
                            oRow.scrollIntoView(true)
                    }
                    else
                    {
                        rowIndex = rowIndex - 1;
                        oRow = aValueRows[rowIndex];
                        rowIndex = GetRowIndex(oRow);
                        if(rowIndex >= 0)
                        {
                            SelectedValue = _oValues.aValues[rowIndex].iValue;
                            ScrollVerticalList(oValueList,oRow,oRow.rowIndex,iLength,false)
                        }
                    }
                }
            RefreshItemProperties();
            break;
        default:
            break
    }
}
function GetRowIndex(row)
{
    var rowIndex = Number(row.id.substr((this.id + "_val").length));
    if(rowIndex == Number.NaN)
        return -1;
    return rowIndex
}
function runCommand(command)
{
    if(getDisabled() || !checkCommand(command))
        return;
    switch(command)
    {
        case CommandAdd:
            addValue(formatString(LOCID_PICKLIST_DEFAULT_LABEL,_oValues.iNextValue));
            RefreshItemProperties();
            break;
        case CommandEdit:
            break;
        case CommandRemove:
            if(SelectedValue != null)
            {
                var rowIndex = _oValues.FindValue(SelectedValue);
                removeValue(true,SelectedValue);
                if(IsNull(SelectedValue))
                {
                    var oSelected = getObjByName("val" + rowIndex);
                    if(!IsNull(oSelected))
                        SelectedValue = _oValues.aValues[rowIndex].iValue;
                    else
                    {
                        rowIndex = rowIndex - 1;
                        oSelected = getObjByName("val" + rowIndex);
                        if(!IsNull(oSelected))
                            SelectedValue = _oValues.aValues[rowIndex].iValue
                    }
                    RefreshItemProperties()
                }
            }
            _oValues.SetNextValue(0);
            break;
        case CommandMoveUP:
            SelectedValue != null && 
                moveValueUp();
            break;
        case CommandMoveDown:
            SelectedValue != null && 
                moveValueDown();
            break;
        case CommandSortAsc:
            sortValues(true);
            break;
        case CommandSortDes:
            sortValues(false);
            break;
        default:
            return
    }
    fireChangeEvent()
}
function checkCommand(command)
{
    var o;
    switch(command)
    {
        case CommandAdd:
            o = getObjByName("btnAddValue");
            break;
        case CommandEdit:
            o = getObjByName("btnEditValue");
            break;
        case CommandRemove:
            o = getObjByName("btnRemoveValue");
            break;
        case CommandMoveUP:
            o = getObjByName("btnMoveValueUp");
            break;
        case CommandMoveDown:
            o = getObjByName("btnMoveValueDown");
            break;
        case CommandSortAsc:
            o = getObjByName("btnSortAsc");
            break;
        case CommandSortDes:
            o = getObjByName("btnSortDesc");
            break
    }
    if(!IsNull(o) && (IsNull(o.disabled) || !o.disabled))
        return true;
    return false
}
function handleItemChange()
{
    if(SelectedValue == null)
    {
        ResetItemProperties();
        return
    }
    var iValue,
        sLabel,
        oValue,
        oCtrl;
    if(!checkFunction("edit"))
        throw new Error("Function not available");
    else
        if(getDisabled())
            return;
    iValue = _oValues.iSelectedValue;
    oValue = _oValues.GetValue(iValue);
    oCtrl = event.srcElement;
    if(oCtrl != null && oCtrl.id != null)
    {
        var eleName = oCtrl.id.substring((this.id + "_").length);
        switch(eleName)
        {
            case TextBoxIntegerId:
            case TextBoxFloatId:
            case TextBoxTextId:
                if(IsNull($find(oCtrl.id).get_dataValue()) || oCtrl.value == "")
                {
                    $find(oCtrl.id).set_dataValue(oValue.iValue);
                    oCtrl.focus();
                    oCtrl.select();
                    break
                }
                var newVal = $find(oCtrl.id).get_dataValue();
                if(newVal != iValue)
                {
                    var tmpValue = _oValues.GetValue(newVal);
                    if(!IsNull(tmpValue))
                    {
                        alert(formatString(LOCID_VALUE_NOT_UNIQUE,tmpValue.iValue,tmpValue.sLabel));
                        $find(oCtrl.id).set_dataValue(oValue.iValue);
                        return
                    }
                    oValue.iValue = newVal;
                    SelectedValue = newVal;
                    _oValues.SetNextValue(0)
                }
                break;
            case "txtItemLb":
                var val = $find(oCtrl.id).get_dataValue();
                if(!IsNull(val) && val != "")
                    oValue.sLabel = val;
                else
                {
                    $find(oCtrl.id).set_dataValue(oValue.sLabel);
                    oCtrl.focus();
                    oCtrl.select()
                }
                break
        }
        var iIndex = _oValues.FindValue(iValue);
        if(iIndex >= 0)
        {
            var selectedRow = element.document.getElementById(this.id + "_val" + iIndex);
            if(!IsNull(selectedRow))
            {
                selectedRow.value = oValue.iValue;
                selectedRow.children[0].innerHTML = CrmEncodeDecode.CrmHtmlEncode(oValue.sLabel)
            }
        }
        fireChangeEvent()
    }
}
function fireChangeEvent()
{
    var oArg = createEventObject();
    onChangeEvent.fire(oArg)
}
function setGlow(o,isGlow)
{
    if(!o.firstChild.firstChild.disabled)
        o.firstChild.className = isGlow ? "ms-crm-optionset-Label-Hovered" : "ms-crm-optionset-Label-Opened"
}
function resetGlow(o)
{
    o.firstChild.className = "ms-crm-optionset-Label"
}
function cmdFocusIn()
{
    var el = getButtonElement();
    if(!IsNull(el))
    {
        if(el.firstChild.firstChild.disabled)
            return;
        setGlow(el,true)
    }
}
function cmdFocusOut()
{
    var el = getButtonElement();
    if(!IsNull(el))
    {
        if(el.firstChild.firstChild.disabled)
            return;
        resetGlow(el)
    }
}
function getButtonElement()
{
    var el = event.srcElement;
    while(!IsNull(el) && el.tagName != "TD")
        el = el.parentElement;
    return el
}
function InitCommandEvent()
{
    setCommandEvent(CommandAdd);
    setCommandEvent(CommandRemove);
    setCommandEvent(CommandMoveUP);
    setCommandEvent(CommandMoveDown);
    setCommandEvent(CommandSortAsc);
    setCommandEvent(CommandSortDes)
}
function setCommandEvent(command)
{
    var o;
    switch(command)
    {
        case CommandAdd:
            o = getObjByName("btnAddValue");
            break;
        case CommandRemove:
            o = getObjByName("btnRemoveValue");
            break;
        case CommandMoveUP:
            o = getObjByName("btnMoveValueUp");
            break;
        case CommandMoveDown:
            o = getObjByName("btnMoveValueDown");
            break;
        case CommandSortAsc:
            o = getObjByName("btnSortAsc");
            break;
        case CommandSortDes:
            o = getObjByName("btnSortDesc");
            break
    }
    if(!IsNull(o) && (IsNull(o.disabled) || !o.disabled))
    {
        o.attachEvent("onfocus",cmdFocusIn);
        o.attachEvent("onblur",cmdFocusOut);
        o.attachEvent("onmouseover",cmdFocusIn);
        o.attachEvent("onmouseout",cmdFocusOut)
    }
}

</script>
</public:component>
