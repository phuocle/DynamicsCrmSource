<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ImportExport_Label_ImportFromCSV">
    <value>Import from CSV</value>
    <comment>Import from CSV file</comment>
  </data>
  <data name="ImportExport_Label_ImportFromExcel">
    <value>Import from Excel</value>
    <comment>Import from Excel file.</comment>
  </data>
  <data name="ImportExport_Label_FileSizeInBytes">
    <value>Bytes</value>
    <comment>File Size</comment>
  </data>
  <data name="ImportExport_Label_FileSizeInKB">
    <value>KB</value>
    <comment>File Size</comment>
  </data>
  <data name="ImportExport_Label_FileSizeInMB">
    <value>MB</value>
    <comment>File Size</comment>
  </data>
  <data name="ImportExport_Label_FileSizeInGB">
    <value>GB</value>
    <comment>File Size</comment>
  </data>
  <data name="ImportExport_Label_FileSizeInTB">
    <value>TB</value>
    <comment>File Size</comment>
  </data>
  <data name="ImportExport_Label_InvalidFileFormat">
    <value>Selected file is a different file type than you selected for import</value>
    <comment>Invalid file format than selected filetype</comment>
  </data>
  <data name="ImportExport_Label_NoFileSelected">
    <value>No file is selected. To continue, please select a file to import.</value>
    <comment>No File Selected</comment>
  </data>
  <data name="ImportExport_Label_NoDataInFile">
    <value>Selected file contains no data.</value>
    <comment>no data in file</comment>
  </data>
  <data name="ImportExport_Label_InvalidFileSubmitted">
    <value>Selected file isn’t valid for “{0}” import.</value>
    <comment>File submitted is not valid for import</comment>
  </data>
  <data name="ImportExport_Label_UnmappedFieldConfimationDialogTitle">
    <value>Submit Data</value>
    <comment>Unmapped Field Confimation Dialog title</comment>
  </data>
  <data name="ImportExport_Label_OptionalUnmappedFieldConfimationDialog">
    <value>The wizard detected one or more unmapped fields. Do you want to ignore the unmapped fields and continue?</value>
    <comment>Unmapped Field Confimation Dialog</comment>
  </data>
  <data name="ImportExport_Label_MandatoryAndOptionalUnmappedFieldConfimationDialog">
    <value>The wizard detected one or more unmapped fields. Note that unmapped mandatory fields could lead to import failures. Do you want to ignore the unmapped fields and continue?</value>
    <comment>Unmapped Field Confimation Dialog</comment>
  </data>
  <data name="ImportExport_Label_MandatoryUnmappedFieldConfimationDialog">
    <value>Some required fields are not mapped. This might result in some records not being imported.</value>
    <comment>Unmapped Field Confimation Dialog</comment>
  </data>
  <data name="ImportExport_Label_ImportFromExchangeFailed">
    <value>Import of Contacts from Exchange has Failed {0}</value>
    <comment>mport of Contacts from Exchange has Failed</comment>
  </data>
  <data name="ImportExport_Label_UnmappedMandatoryField">
    <value>The wizard detected one or more Unmapped mandatory fields</value>
    <comment>Unmapped Manadatory Field</comment>
  </data>
  <data name="ImportExport_Label_InvalidFileSize">
    <value>Selected File exceeds allowableed size limit.</value>
    <comment>File size is more than expected</comment>
  </data>
  <data name="ImportExport_Label_DeleteImportLogsWithHistory">
    <value>Do you want to delete all the records created from the selected file, its imported log and any related records? You can't undo this action</value>
    <comment>Delete Imported Logs with History</comment>
  </data>
  <data name="ImportExport_Label_DeleteImportLogsData">
    <value>Do you want to delete imported records for the selected import source file? You can't undo this action</value>
    <comment>Delete Imported Logs Data</comment>
  </data>
  <data name="ImportExport_Label_DeleteImportLogsDialogTitle">
    <value>Confirm Delete</value>
    <comment>Delete Imported Logs Data Dialog Title</comment>
  </data>
  <data name="ImportExport_Label_NoRecordSelected">
    <value>No Record Selected to Delete</value>
    <comment>No Record Selected</comment>
  </data>
  <data name="ImportExport_Label_BulkDeletion">
    <value>Bulk Deletion</value>
    <comment>Bulk Deletion</comment>
  </data>
  <data name="ImportExport_Label_Confirm">
    <value>Confirm</value>
    <comment>Confirm</comment>
  </data>
  <data name="ImportExport_Label_Cancel">
    <value>Cancel</value>
    <comment>Cancel</comment>
  </data>
  <data name="ImportExport_Label_MultipleDeleteFailures">
    <value>Deletion of one or more records have encountered a failure</value>
    <comment>Delete</comment>
  </data>
  <data name="ImportExport_Label_UnknownFailures">
    <value>Unexpected Error! Please try again. If the problem continues, check the Microsoft Dynamics 365 Community for solutions or contact your Administrator. For more assistance, contact Microsoft Support and provide the technical details of the error.</value>
    <comment>Unknown Failures</comment>
  </data>
  <data name="ImportExport_Label_FileSizeMaxLimitExceeded">
    <value>Selected File exceeds allowed size limit.</value>
    <comment>File size max limit exceeded</comment>
  </data>
  <data name="ImportExport_Label_NoErrorRowsFoundInThisImport">
    <value>No error rows found in this import.</value>
    <comment>No error rows found in this import</comment>
  </data>
  <data name="ImportExport_Label_DeleteImportLogsWithHistoryMultipleFiles">
    <value>Do you want to delete all the records created from the selected files, their imported log, and any related records? You can't undo this action.</value>
    <comment>Delete Imported Logs with History - Multiple Files</comment>
  </data>
  <data name="ImportExport_Label_DeleteImportLogsDataMultipleFiles">
    <value>Do you want to delete imported records for the selected import source files? You can't undo this action.</value>
    <comment>Delete Imported Logs Data - Multiple Files</comment>
  </data>
</root>